# bot.py
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent,
    ReplyKeyboardMarkup, KeyboardButton
)
from dotenv import load_dotenv
import os
import sys
import re
import requests
import traceback
from collections import defaultdict
from io import BytesIO
import logging
import signal
import threading
from datetime import datetime, timedelta

# ==========================
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï ENV:
# BOT_TOKEN, API_ID, API_HASH, OPENROUTER_API_KEY, HF_TOKEN
# –î–õ–Ø –ö–ê–¢–ê–õ–û–ì–ê:
# CATALOG_URL, CATALOG_AUTH_USER, CATALOG_AUTH_PASS, CATALOG_REFRESH_MIN=30
# TELEGRAM_ADMIN_ID, MANAGER_CHAT_ID
# –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: OR_TEXT_MODEL, HF_IMAGE_MODEL
# ==========================

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bot")

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OR_MODEL = os.getenv("OR_TEXT_MODEL", "openai/gpt-oss-120b")

HF_TOKEN = os.getenv("HF_TOKEN")
HF_IMAGE_MODEL = os.getenv("HF_IMAGE_MODEL", "stabilityai/sdxl-turbo")

CATALOG_URL = os.getenv("CATALOG_URL")
CATALOG_AUTH_USER = os.getenv("CATALOG_AUTH_USER")
CATALOG_AUTH_PASS = os.getenv("CATALOG_AUTH_PASS")
CATALOG_REFRESH_MIN = int(os.getenv("CATALOG_REFRESH_MIN", "30"))
TELEGRAM_ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0"))

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID_STR,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "HF_TOKEN": HF_TOKEN,
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
    sys.exit(1)

try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR)
    sys.exit(1)

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

def has_cyrillic(text: str) -> bool:
    return bool(re.search(r"[\u0400-\u04FF]", text or ""))

def translate_to_english(text: str) -> str:
    try:
        payload = {
            "model": OR_MODEL,
            "messages": [
                {"role": "system", "content": (
                    "You are a precise translator. Translate the user prompt "
                    "from Russian to concise English. Return ONLY the translated text."
                )},
                {"role": "user", "content": text}
            ],
            "temperature": 0.2
        }
        r = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("PromptTranslator"),
            json=payload,
            timeout=40,
            allow_redirects=False
        )
        if r.status_code == 200 and r.headers.get("content-type","").startswith("application/json"):
            return r.json()["choices"][0]["message"]["content"].strip()
        log.warning("Translate HTTP %s | %s", r.status_code, r.text[:300])
    except Exception:
        traceback.print_exc()
    return text

def boost_prompt(en_prompt: str, user_negative: str = "") -> tuple[str, str]:
    base_positive = (
        f"{en_prompt}, ultra-detailed, high quality, high resolution, "
        f"sharp focus, intricate details, 8k, dramatic lighting"
    )
    base_negative = (
        "lowres, blurry, out of focus, pixelated, deformed, bad anatomy, "
        "extra fingers, watermark, text, signature"
    )
    neg = (base_negative + ", " + user_negative) if user_negative else base_negative
    return base_positive, neg

PHONE_RE = re.compile(r"^\+?\d[\d\s\-()]{6,}$")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
chat_history = defaultdict(list)
HISTORY_LIMIT = 10
def clamp_history(history): return history[-HISTORY_LIMIT:] if len(history) > HISTORY_LIMIT else history

# ---------- –ö–ê–¢–ê–õ–û–ì / –ó–ê–ì–†–£–ó–ö–ê ----------
catalog = []
catalog_last_fetch = None
catalog_lock = threading.Lock()
pending_reserve = {}  # user_id -> product_id (–æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω)

def fetch_catalog(force=False):
    global catalog, catalog_last_fetch
    with catalog_lock:
        now = datetime.utcnow()
        if not force and catalog_last_fetch and now - catalog_last_fetch < timedelta(minutes=CATALOG_REFRESH_MIN):
            return False
        if not CATALOG_URL:
            log.warning("CATALOG_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞")
            return False
        auth = (CATALOG_AUTH_USER, CATALOG_AUTH_PASS) if CATALOG_AUTH_USER else None
        try:
            r = requests.get(CATALOG_URL, auth=auth, timeout=30)
            r.raise_for_status()
            data = r.json()
            if isinstance(data, list):
                catalog = data
                catalog_last_fetch = now
                log.info("–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: %d –ø–æ–∑–∏—Ü–∏–π", len(catalog))
                return True
            else:
                log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (–æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫)")
        except Exception as e:
            traceback.print_exc()
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: %s", e)
        return False

def periodic_refresh():
    try: fetch_catalog(force=False)
    finally: threading.Timer(CATALOG_REFRESH_MIN * 60, periodic_refresh).start()

# –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ (–ø–æ–¥—Å—Ç—Ä–æ–∫–∞)
def search_products(query, limit=10):
    q = (query or "").strip().lower()
    results = []
    for item in catalog:
        name = str(item.get("name","")).lower()
        sku  = str(item.get("sku","")).lower()
        brand= str(item.get("brand","")).lower()
        if q in f"{name} {sku} {brand}":
            results.append(item)
            if len(results) >= limit: break
    return results

# –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
def product_caption(p):
    price = p.get("price")
    stock = p.get("stock")
    lines = [
        f"üõí {p.get('name','')}",
        f"–ê—Ä—Ç–∏–∫—É–ª: {p.get('sku','‚Äî')}",
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ" if price is not None else "–¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ",
        f"–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç." if stock is not None else "–ù–∞–ª–∏—á–∏–µ: —É—Ç–æ—á–Ω—è–π—Ç–µ",
    ]
    return "\n".join(lines)

def product_keyboard(p):
    pid = p.get("id") or p.get("sku")
    btns = [[InlineKeyboardButton("üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve:{pid}")]]
    if p.get("category"):
        btns.append([InlineKeyboardButton(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p['category']}", callback_data=f"cat:{p['category']}")])
    btns.append([InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –≤ —á–∞—Ç–µ", switch_inline_query_current_chat=p.get("sku",""))])
    return InlineKeyboardMarkup(btns)

def send_product_message(message, p):
    img = p.get("image_url")
    caption = product_caption(p)
    kb = product_keyboard(p)
    if img:
        message.reply_photo(img, caption=caption, reply_markup=kb)
    else:
        message.reply_text(caption, reply_markup=kb)

# ---------- NLU: —Ä–∞–∑–±–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ ----------
INTENT = re.compile(
    r"(?P<what>–∫–∞–±–µ–ª—å|–ø—Ä–æ–≤–æ–¥|–∞–≤—Ç–æ–º–∞—Ç|–≤—ã–∫–ª—é—á–∞—Ç–µ–ª[—å—è—å]|–ø—É—Å–∫–∞—Ç–µ–ª[—å—è–∏])?"
    r".*?(?P<num>\d{1,3})\s*(?P<unit>–º–º2|–º–º¬≤|–º–º|sqmm|–∞|a)?",
    re.IGNORECASE
)

def parse_intent(text: str):
    t = (text or "").lower()
    brand = None
    for b in ("abb","schneider","iek","legrand","hager","siemens","rexant","sevkabel"):
        if b in t: brand = b; break

    m = INTENT.search(t)
    itype, sqmm, amp = None, None, None
    if m:
        what = (m.group("what") or "")
        num  = m.group("num")
        unit = (m.group("unit") or "").lower()
        if what.startswith("–∫–∞–±–µ–ª—å") or "–ø—Ä–æ–≤–æ–¥" in what: itype = "–∫–∞–±–µ–ª—å"
        elif what.startswith("–∞–≤—Ç–æ–º–∞—Ç") or "–≤—ã–∫–ª—é—á–∞—Ç–µ–ª" in what: itype = "–∞–≤—Ç–æ–º–∞—Ç"
        elif "–ø—É—Å–∫–∞—Ç–µ–ª" in what: itype = "–ø—É—Å–∫–∞—Ç–µ–ª—å"
        try:
            n = int(num)
            if unit in ("–º–º2","–º–º¬≤","–º–º","sqmm"):
                sqmm = n
                if not itype: itype = "–∫–∞–±–µ–ª—å"
            elif unit in ("–∞","a"):
                amp = n
                if not itype: itype = "–∞–≤—Ç–æ–º–∞—Ç"
        except: pass
    return {"type": itype, "sqmm": sqmm, "amp": amp, "brand": brand}

def search_products_smart(query_text: str, limit=10):
    intent = parse_intent(query_text)
    q = (query_text or "").strip().lower()
    results = []
    for p in catalog:
        name = str(p.get("name","")).lower()
        sku  = str(p.get("sku","")).lower()
        brand= str(p.get("brand","")).lower()
        ptype= str(p.get("type","")).lower()
        amp  = p.get("amp")
        sq   = p.get("sqmm")

        score = 0
        if intent["type"]:
            if intent["type"] not in ptype: continue
            score += 2
        if intent["amp"] and isinstance(amp, (int,float)):
            score += 3 if amp == intent["amp"] else (2 if abs(amp - intent["amp"]) <= 10 else 0)
        if intent["sqmm"] and isinstance(sq, (int,float)):
            score += 3 if sq == intent["sqmm"] else (2 if abs(sq - intent["sqmm"]) <= 5 else 0)
        if intent["brand"] and intent["brand"] in brand:
            score += 2
        if q and q in f"{name} {sku} {brand} {ptype}":
            score += 1
        if score > 0:
            results.append((score, p))

    if not results:
        return search_products(query_text, limit=limit)

    results.sort(key=lambda x: x[0], reverse=True)
    return [p for _, p in results[:limit]]

def suggest_alternatives(intent, limit=6):
    alts = []
    if not intent["type"]: return alts
    key = "amp" if intent["type"] in ("–∞–≤—Ç–æ–º–∞—Ç","–ø—É—Å–∫–∞—Ç–µ–ª—å") else "sqmm"
    target = intent["amp"] if key == "amp" else intent["sqmm"]
    if not target: return alts
    for p in catalog:
        if intent["type"] not in str(p.get("type","")).lower(): continue
        val = p.get(key)
        if isinstance(val, (int,float)):
            alts.append((abs(val - target), p))
    alts.sort(key=lambda x: x[0])
    return [p for _, p in alts[:limit]]

# ---------- PYROGRAM ----------
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ---------- –ö–û–ú–ê–ù–î–´ / UI ----------
@app.on_message(filters.command("start") & filters.private)
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat:all"),
         InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="")],
        [InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="reset_ctx")]
    ])
    kb_main = ReplyKeyboardMarkup(
        [[KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üîé –ü–æ–∏—Å–∫")],
         [KeyboardButton("üßπ –°–±—Ä–æ—Å")]],
        resize_keyboard=True
    )
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚ö°\n"
        "–ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª ‚Äî —è –ø–æ–¥–±–µ—Ä—É —Ç–æ–≤–∞—Ä—ã.\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–∏—Å–∫ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
        reply_markup=kb_main
    )
    message.reply_text(
        "–î–æ–ø. –º–µ–Ω—é:",
        reply_markup=kb_inline
    )

@app.on_message(filters.command("help") & filters.private)
def help_handler(_, message):
    message.reply_text(
        "–ü–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –∫–∞–±–µ–ª—å 35–º–º\n‚Ä¢ –∞–≤—Ç–æ–º–∞—Ç 400–ê ABB\n\n"
        "–ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É: –ö–∞—Ç–∞–ª–æ–≥ / –ü–æ–∏—Å–∫ / –°–±—Ä–æ—Å."
    )

@app.on_message(filters.command("ping"))
def ping_handler(_, message): message.reply_text("pong ‚úÖ")

# ----- –ö–ê–¢–ê–õ–û–ì -----
@app.on_message(filters.command("catalog"))
def catalog_cmd(_, message):  # –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    show_catalog(_, message)

def show_catalog(_, message):
    if not catalog:
        message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    for p in catalog[:10]:
        try: send_product_message(message, p)
        except Exception: traceback.print_exc()

@app.on_message(filters.command("find"))
def find_cmd(_, message):
    query = " ".join(message.command[1:]).strip()
    handle_search_text(_, message, query)

def handle_search_text(_, message, text):
    if not text:
        message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–±–µ–ª—å 35–º–º, –∞–≤—Ç–æ–º–∞—Ç 400–ê ABB.")
        return
    if not catalog:
        message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    results = search_products_smart(text, limit=10)
    if results:
        for p in results:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return

    intent = parse_intent(text)
    alts = suggest_alternatives(intent, limit=6)
    if alts:
        message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
        for p in alts:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return

    message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üòï –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å: –±—Ä–µ–Ω–¥/—Ç–æ–∫/—Å–µ—á–µ–Ω–∏–µ.")

# ----- INLINE -----
@app.on_inline_query()
def inline_query_handler(client, inline_query):
    q = inline_query.query.strip()
    if not q or not catalog: return
    results = search_products_smart(q, limit=25)
    items = []
    for idx, p in enumerate(results):
        caption = product_caption(p)
        kb = product_keyboard(p)
        img = p.get("image_url")
        if img:
            items.append(InlineQueryResultPhoto(
                photo_url=img, thumb_url=img, caption=caption, reply_markup=kb, id=str(idx)
            ))
        else:
            items.append(InlineQueryResultArticle(
                title=p.get("name","–¢–æ–≤–∞—Ä"),
                description=f"SKU: {p.get('sku','‚Äî')} | {p.get('price','‚Äî')} ‚ÇΩ",
                input_message_content=InputTextMessageContent(caption),
                reply_markup=kb, id=str(idx)
            ))
    try: inline_query.answer(items, cache_time=5, is_personal=True)
    except Exception: traceback.print_exc()

# ----- CALLBACKS -----
@app.on_callback_query()
def callbacks_handler(client, cq):
    data = cq.data or ""
    if data == "reset_ctx":
        chat_history[cq.from_user.id] = []
        cq.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω")
        cq.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω. /start")
        return
    if data.startswith("reserve:"):
        pid = data.split(":",1)[1]
        pending_reserve[cq.from_user.id] = pid
        cq.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
        cq.answer()
        return
    if data.startswith("cat:"):
        cat = data.split(":",1)[1].strip().lower()
        items = [p for p in catalog if cat in ("all", str(p.get("category","")).lower())]
        if not items:
            cq.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
            cq.answer(); return
        for p in items[:10]:
            try:
                send_product_message(cq.message, p)
            except Exception:
                traceback.print_exc()
        cq.answer()

# ----- –°–ò–ù–ö –ö–ê–¢–ê–õ–û–ì–ê -----
@app.on_message(filters.command("sync1c"))
def sync1c_handler(_, message):
    if TELEGRAM_ADMIN_ID and message.from_user.id != TELEGRAM_ADMIN_ID:
        message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return
    ok = fetch_catalog(force=True)
    message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

# ----- –ë–†–û–ù–¨: —Å–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ -----
@app.on_message(filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help","ping"]))
def maybe_collect_phone(_, message):
    uid = message.from_user.id
    if uid in pending_reserve:
        log.info("waiting phone from uid=%s", uid)
        pid = pending_reserve.get(uid)
        phone = (message.text or "").strip()
        if not PHONE_RE.match(phone):
            message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑.")
            return
        product = None
        for p in catalog:
            if p.get("id") == pid or p.get("sku") == pid: product = p; break
        text = (
            "üßæ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–¢–æ–≤–∞—Ä: {product.get('name','') if product else pid}\n"
            f"SKU: {product.get('sku','‚Äî') if product else '‚Äî'}\n"
            f"–¶–µ–Ω–∞: {product.get('price','‚Äî') if product else '‚Äî'} ‚ÇΩ"
        )
        pending_reserve.pop(uid, None)
        if MANAGER_CHAT_ID:
            try: _.send_message(MANAGER_CHAT_ID, text)
            except Exception: traceback.print_exc()
        message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòä")
        return  # –Ω–µ –ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ

# ----- /img (HF) -----
@app.on_message(filters.command("img"))
def image_handler(_, message):
    raw = " ".join(message.command[1:]).strip()
    if not raw:
        message.reply_text("–ù–∞–ø–∏—à–∏: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ --no —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏"); return
    user_neg = ""
    if "--no" in raw:
        raw, user_neg = raw.split("--no", 1)[0].strip(), raw.split("--no", 1)[1].strip()
    prompt_src = raw
    prompt_en = translate_to_english(raw) if has_cyrillic(raw) else raw
    pos_prompt, neg_prompt = boost_prompt(prompt_en, user_negative=user_neg)
    try:
        model = (HF_IMAGE_MODEL or "stabilityai/sdxl-turbo").strip()
        url = f"https://api-inference.huggingface.co/models/{model}"
        headers = {"Authorization": f"Bearer {HF_TOKEN}", "Accept": "image/png"}
        payload = {
            "inputs": pos_prompt,
            "parameters": {"negative_prompt": neg_prompt, "num_inference_steps": 24, "guidance_scale": 7.0},
            "options": {"wait_for_model": True}
        }
        resp = requests.post(url, headers=headers, json=payload, timeout=180)
        ct = resp.headers.get("content-type", "")
        if resp.status_code == 200 and ct.startswith("image/"):
            bio = BytesIO(resp.content); bio.name = "image.png"
            message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt_src or prompt_en}"); return
        if resp.status_code in (429, 503):
            message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É ‚è≥"); return
        snippet = (getattr(resp, "text", "") or "")[:800]
        message.reply_text(f"‚ùå Hugging Face {resp.status_code}\n{snippet}")
    except Exception:
        traceback.print_exc(); message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ----- –¢–ï–ö–°–¢: —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ ‚Üí –ø–æ–∏—Å–∫ ‚Üí –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã ‚Üí AI (fallback) -----
@app.on_message(
    filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help","ping"]),
    group=1  # –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
)
def text_handler(_, message):
    uid = message.from_user.id
    user_text = (message.text or "").strip()
    low = user_text.lower()

    # –∫–Ω–æ–ø–∫–∏-—è—Ä–ª—ã–∫–∏
    if low in ("üì¶ –∫–∞—Ç–∞–ª–æ–≥", "–∫–∞—Ç–∞–ª–æ–≥"): return show_catalog(_, message)
    if low in ("üîé –ø–æ–∏—Å–∫", "–ø–æ–∏—Å–∫"):
        message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª."); return
    if low in ("üßπ —Å–±—Ä–æ—Å", "—Å–±—Ä–æ—Å"): return reset_handler(_, message)

    # 1) —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–±—ã—á–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    if catalog:
        results = search_products_smart(user_text, limit=8)
        if results:
            for p in results:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return
        # 1.1) –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ø–æ –±–ª–∏–∑–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        intent = parse_intent(user_text)
        alts = suggest_alternatives(intent, limit=6)
        if alts:
            message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
            for p in alts:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return

    # 2) –±—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if re.search(r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|hi|hello)\b", low):
        message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª, –∏–ª–∏ –∂–º–∏ ¬´üì¶ –ö–∞—Ç–∞–ª–æ–≥¬ª.")
        return

    # 3) AI-—Ñ–æ–ª–ª–±–µ–∫
    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])
    try:
        payload = {
            "model": OR_MODEL,
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–æ–≥–∞–π –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("TelegramBotNLSearch"),
            json=payload, timeout=60, allow_redirects=False
        )
        if resp.status_code != 200:
            message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª."); return
        bot_reply = resp.json()["choices"][0]["message"]["content"].strip() or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])
        message.reply_text(bot_reply)
    except Exception:
        traceback.print_exc()
        message.reply_text("–£–ø—Å, –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª. –ü—Ä–∏–º–µ—Ä: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª –∏–ª–∏ ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª.")

# ----- RESET -----
@app.on_message(filters.command("reset"))
def reset_handler(_, message):
    chat_history[message.from_user.id] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ----- –ì–†–ê–¶–ò–û–ó–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï -----
def _graceful_exit(sig, frame):
    logging.getLogger().info("Stop signal received (%s). Exiting...", sig)
    try: app.stop()
    finally: os._exit(0)

signal.signal(signal.SIGTERM, _graceful_exit)
signal.signal(signal.SIGINT, _graceful_exit)

# ----- –ó–ê–ü–£–°–ö -----
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        if CATALOG_URL:
            if not fetch_catalog(force=True): log.warning("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ")
            periodic_refresh()
        app.run()
    except Exception:
        traceback.print_exc(); sys.exit(1)


















