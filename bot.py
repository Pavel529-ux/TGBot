# bot.py
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent,
    ReplyKeyboardMarkup, KeyboardButton
)
from dotenv import load_dotenv
import os, sys, re, requests, traceback, logging, signal, threading, io, csv, zipfile
import xml.etree.ElementTree as ET
from collections import defaultdict
from io import BytesIO
from datetime import datetime, timedelta, timezone  # ‚Üê timezone-aware

# ========================== ENV ==========================
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bot")
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OR_MODEL = os.getenv("OR_TEXT_MODEL", "openai/gpt-oss-120b")

HF_TOKEN = os.getenv("HF_TOKEN")
HF_IMAGE_MODEL = os.getenv("HF_IMAGE_MODEL", "stabilityai/sdxl-turbo")

CATALOG_URL = os.getenv("CATALOG_URL")
CATALOG_AUTH_USER = os.getenv("CATALOG_AUTH_USER")
CATALOG_AUTH_PASS = os.getenv("CATALOG_AUTH_PASS")
CATALOG_REFRESH_MIN = int(os.getenv("CATALOG_REFRESH_MIN", "30"))
TELEGRAM_ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0"))

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN, "API_ID": API_ID_STR, "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY, "HF_TOKEN": HF_TOKEN
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing)); sys.exit(1)
try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR); sys.exit(1)

# ========================== –£—Ç–∏–ª–∏—Ç—ã ==========================
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

def has_cyrillic(text: str) -> bool:
    return bool(re.search(r"[\u0400-\u04FF]", text or ""))

def translate_to_english(text: str) -> str:
    try:
        payload = {"model": OR_MODEL, "messages": [
            {"role": "system", "content": "Translate Russian to concise English. Return ONLY translated text."},
            {"role": "user", "content": text}
        ], "temperature": 0.2}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=or_headers("PromptTranslator"), json=payload,
                          timeout=40, allow_redirects=False)
        if r.status_code == 200 and r.headers.get("content-type","").startswith("application/json"):
            return r.json()["choices"][0]["message"]["content"].strip()
        log.warning("Translate HTTP %s | %s", r.status_code, r.text[:300])
    except Exception:
        traceback.print_exc()
    return text

def boost_prompt(en_prompt: str, user_negative: str = "") -> tuple[str, str]:
    base_pos = f"{en_prompt}, ultra-detailed, high quality, high resolution, sharp focus, intricate details, 8k, dramatic lighting"
    base_neg = "lowres, blurry, out of focus, pixelated, deformed, bad anatomy, extra fingers, watermark, text, signature"
    neg = (base_neg + ", " + user_negative) if user_negative else base_neg
    return base_pos, neg

PHONE_RE = re.compile(r"^\+?\d[\d\s\-()]{6,}$")

# ========================== –ü–∞–º—è—Ç—å ==========================
chat_history = defaultdict(list)
HISTORY_LIMIT = 10
def clamp_history(h): return h[-HISTORY_LIMIT:] if len(h) > HISTORY_LIMIT else h

# ========================== –ö–∞—Ç–∞–ª–æ–≥ (–∫—ç—à) ==========================
catalog = []
catalog_last_fetch = None
catalog_lock = threading.Lock()
pending_reserve = {}  # user_id -> product_id

# ---- –∫–∞—Ä—Ç–æ—á–∫–∏/–∫–Ω–æ–ø–∫–∏ ----
def product_caption(p):
    price = p.get("price"); stock = p.get("stock")
    return "\n".join([
        f"üõí {p.get('name','')}",
        f"–ê—Ä—Ç–∏–∫—É–ª: {p.get('sku','‚Äî')}",
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ" if price is not None else "–¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ",
        f"–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç." if stock is not None else "–ù–∞–ª–∏—á–∏–µ: —É—Ç–æ—á–Ω—è–π—Ç–µ",
    ])

def product_keyboard(p):
    from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    pid = p.get("id") or p.get("sku")
    btns = [[InlineKeyboardButton("üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve:{pid}")]]
    if p.get("category"):
        btns.append([InlineKeyboardButton(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p['category']}", callback_data=f"cat:{p['category']}")])
    btns.append([InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –≤ —á–∞—Ç–µ", switch_inline_query_current_chat=p.get("sku",""))])
    return InlineKeyboardMarkup(btns)

def send_product_message(message, p):
    img = p.get("image_url"); caption = product_caption(p); kb = product_keyboard(p)
    if img: message.reply_photo(img, caption=caption, reply_markup=kb)
    else:   message.reply_text(caption, reply_markup=kb)

# ---- –ø–æ–∏—Å–∫/–Ω–∞–º–µ—Ä–µ–Ω–∏–µ ----
INTENT = re.compile(
    r"(?P<what>–∫–∞–±–µ–ª—å|–ø—Ä–æ–≤–æ–¥|–∞–≤—Ç–æ–º–∞—Ç|–≤—ã–∫–ª—é—á–∞—Ç–µ–ª[—å—è—å]|–ø—É—Å–∫–∞—Ç–µ–ª[—å—è–∏])?"
    r".*?(?P<num>\d{1,3})\s*(?P<unit>–º–º2|–º–º¬≤|–º–º|sqmm|–∞|a)?",
    re.IGNORECASE
)
def parse_intent(text: str):
    t = (text or "").lower(); brand=None
    for b in ("abb","schneider","iek","legrand","hager","siemens","rexant","sevkabel"):
        if b in t: brand=b; break
    itype=sqmm=amp=None; m=INTENT.search(t)
    if m:
        what=(m.group("what") or ""); unit=(m.group("unit") or "").lower()
        try: n=int(m.group("num"))
        except: n=None
        if what.startswith("–∫–∞–±–µ–ª—å") or "–ø—Ä–æ–≤–æ–¥" in what: itype="–∫–∞–±–µ–ª—å"
        elif what.startswith("–∞–≤—Ç–æ–º–∞—Ç") or "–≤—ã–∫–ª—é—á–∞—Ç–µ–ª" in what: itype="–∞–≤—Ç–æ–º–∞—Ç"
        elif "–ø—É—Å–∫–∞—Ç–µ–ª" in what: itype="–ø—É—Å–∫–∞—Ç–µ–ª—å"
        if n is not None:
            if unit in ("–º–º2","–º–º¬≤","–º–º","sqmm"): sqmm=n; itype=itype or "–∫–∞–±–µ–ª—å"
            elif unit in ("–∞","a"): amp=n; itype=itype or "–∞–≤—Ç–æ–º–∞—Ç"
    return {"type": itype, "sqmm": sqmm, "amp": amp, "brand": brand}

def search_products(q, limit=10):
    q=(q or "").strip().lower(); res=[]
    for it in catalog:
        hay=f"{str(it.get('name','')).lower()} {str(it.get('sku','')).lower()} {str(it.get('brand','')).lower()}"
        if q in hay:
            res.append(it)
            if len(res)>=limit: break
    return res

def search_products_smart(qtext: str, limit=10):
    intent=parse_intent(qtext); q=(qtext or "").strip().lower(); scored=[]
    for p in catalog:
        name=str(p.get("name","")).lower(); sku=str(p.get("sku","")).lower()
        brand=str(p.get("brand","")).lower(); ptype=str(p.get("type","")).lower()
        amp=p.get("amp"); sq=p.get("sqmm"); score=0
        if intent["type"]:
            if intent["type"] not in ptype: continue
            score+=2
        if intent["amp"] and isinstance(amp,(int,float)):
            score+=3 if amp==intent["amp"] else (2 if abs(amp-intent["amp"])<=10 else 0)
        if intent["sqmm"] and isinstance(sq,(int,float)):
            score+=3 if sq==intent["sqmm"] else (2 if abs(sq-intent["sqmm"])<=5 else 0)
        if intent["brand"] and intent["brand"] in brand: score+=2
        if q and q in f"{name} {sku} {brand} {ptype}": score+=1
        if score>0: scored.append((score,p))
    if not scored: return search_products(qtext, limit=limit)
    scored.sort(key=lambda x:x[0], reverse=True)
    return [p for _,p in scored[:limit]]

def suggest_alternatives(intent, limit=6):
    if not intent["type"]: return []
    key="amp" if intent["type"] in ("–∞–≤—Ç–æ–º–∞—Ç","–ø—É—Å–∫–∞—Ç–µ–ª—å") else "sqmm"
    target=intent["amp"] if key=="amp" else intent["sqmm"]
    if not target: return []
    al=[]
    for p in catalog:
        if intent["type"] not in str(p.get("type","")).lower(): continue
        val=p.get(key)
        if isinstance(val,(int,float)): al.append((abs(val-target), p))
    al.sort(key=lambda x:x[0]); return [p for _,p in al[:limit]]

# ========================== –ó–∞–≥—Ä—É–∑—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ ==========================
def parse_tilda_yml(xml_bytes: bytes) -> list[dict]:
    """
    –ü–∞—Ä—Å–µ—Ä YML (Tilda/–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç)
    """
    root = ET.fromstring(xml_bytes)
    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cat_map = {}
    for c in root.findall(".//categories/category"):
        cid = c.get("id") or ""
        name = (c.text or "").strip()
        if cid: cat_map[cid] = name

    items = []
    for o in root.findall(".//offers/offer"):
        sku = o.get("id") or (o.findtext("vendorCode") or "")
        name = o.findtext("name") or ""
        brand = o.findtext("vendor") or ""
        price = o.findtext("price")
        img = o.findtext("picture") or ""
        cat_id = o.findtext("categoryId") or ""
        category = cat_map.get(cat_id, "")

        # —Å–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç–≤—Ä–∏—Å—Ç–∏–∫ –∏–∑ name + –≤—Å–µ—Ö param
        text_for_parse = " ".join([
            name,
            " ".join([(p.text or "") for p in o.findall("param") if p is not None]),
        ]).lower()

        itype = "–∫–∞–±–µ–ª—å" if "–∫–∞–±–µ–ª" in text_for_parse else (
            "–∞–≤—Ç–æ–º–∞—Ç" if ("–∞–≤—Ç–æ–º–∞—Ç" in text_for_parse or "–≤—ã–∫–ª—é—á–∞—Ç" in text_for_parse) else (
                "–ø—É—Å–∫–∞—Ç–µ–ª—å" if "–ø—É—Å–∫–∞—Ç–µ–ª" in text_for_parse else ""
            )
        )
        amp = None; sqmm = None
        m_amp = re.search(r"(\d{2,3})\s*–∞\b", text_for_parse)
        if m_amp: amp = int(m_amp.group(1))
        m_sq = re.search(r"(\d{1,3})\s*–º–º[¬≤2]|\b(\d{1,3})\s*sqmm", text_for_parse)
        if m_sq: sqmm = int([g for g in m_sq.groups() if g][0])

        items.append({
            "id": sku or name, "sku": sku or name, "name": name,
            "type": itype, "brand": brand, "category": category,
            "amp": amp, "sqmm": sqmm,
            "price": float(price) if price else None,
            "stock": None,  # –æ–±—ã—á–Ω–æ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Tilda YML
            "image_url": img
        })
    return items

def parse_commerceml(xml_bytes: bytes) -> list[dict]:
    """CommerceML: –æ–¥–∏–Ω–æ—á–Ω—ã–π XML –∏–ª–∏ ZIP (import.xml + offers.xml)."""
    def _parse_catalog(root):
        cat={}
        for t in root.findall(".//–¢–æ–≤–∞—Ä—ã/–¢–æ–≤–∞—Ä"):
            _id=(t.findtext("–ò–¥") or "").strip()
            name=(t.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or "").strip()
            sku=(t.findtext("–ê—Ä—Ç–∏–∫—É–ª") or "") or _id
            brand=(t.findtext("–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å/–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or t.findtext("–ë—Ä–µ–Ω–¥") or "").strip()
            image=(t.findtext("–ö–∞—Ä—Ç–∏–Ω–∫–∞") or "").strip()
            catref=t.find(".//–ì—Ä—É–ø–ø—ã/–ò–¥"); category=(catref.text or "").strip() if catref is not None else ""
            low=f"{name} {(t.findtext('–û–ø–∏—Å–∞–Ω–∏–µ') or '')}".lower()
            itype="–∫–∞–±–µ–ª—å" if "–∫–∞–±–µ–ª" in low else ("–∞–≤—Ç–æ–º–∞—Ç" if ("–∞–≤—Ç–æ–º–∞—Ç" in low or "–≤—ã–∫–ª—é—á–∞—Ç" in low) else ("–ø—É—Å–∫–∞—Ç–µ–ª—å" if "–ø—É—Å–∫–∞—Ç–µ–ª" in low else ""))
            amp=sqmm=None
            m_amp=re.search(r"(\d{2,3})\s*–∞\b", low); m_sq=re.search(r"(\d{1,3})\s*–º–º[¬≤2]|\b(\d{1,3})\s*sqmm", low)
            if m_amp: amp=int(m_amp.group(1))
            if m_sq:  sqmm=int([g for g in m_sq.groups() if g][0])
            if _id:
                cat[_id]={"id":_id,"sku":sku,"name":name or sku,"brand":brand,"category":category,
                          "image_url":image,"type":itype,"amp":amp,"sqmm":sqmm}
        for g in root.findall(".//–ì—Ä—É–ø–ø—ã/–ì—Ä—É–ø–ø–∞"):
            gid=(g.findtext("–ò–¥") or "").strip(); gname=(g.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or "").strip()
            if gid and gname:
                for v in cat.values():
                    if v.get("category")==gid: v["category"]=gname
        return cat
    def _parse_offers(root):
        offers={}
        for o in root.findall(".//–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"):
            _id=(o.findtext("–ò–¥") or "").strip()
            if not _id: continue
            price=None; qnode=o.find(".//–¶–µ–Ω—ã/–¶–µ–Ω–∞/–¶–µ–Ω–∞–ó–∞–ï–¥–∏–Ω–∏—Ü—É")
            if qnode is not None and qnode.text:
                try: price=float(qnode.text.replace(",", ".").strip())
                except: price=None
            stock=None; qty=o.find("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            if qty is not None and qty.text:
                try: stock=int(float(qty.text.replace(",", ".").strip()))
                except: stock=None
            offers[_id]={"price":price,"stock":stock}
        return offers
    def _one(xml_b: bytes):
        root=ET.fromstring(xml_b); cat_map=_parse_catalog(root); off_map=_parse_offers(root)
        items=[]; keys=set(cat_map.keys())|set(off_map.keys())
        for k in keys:
            base=cat_map.get(k,{}); price=off_map.get(k,{}).get("price"); stock=off_map.get(k,{}).get("stock")
            items.append({
                "id":base.get("id",k),"sku":base.get("sku",k),"name":base.get("name",k),
                "type":base.get("type",""),"brand":base.get("brand",""),"category":base.get("category",""),
                "amp":base.get("amp"),"sqmm":base.get("sqmm"),"price":price,"stock":stock,
                "image_url":base.get("image_url","")
            })
        return items
    if zipfile.is_zipfile(io.BytesIO(xml_bytes)):
        with zipfile.ZipFile(io.BytesIO(xml_bytes)) as z:
            cat_map, off_map = {}, {}
            for name in z.namelist():
                if not name.lower().endswith(".xml"): continue
                data=z.read(name); root=ET.fromstring(data)
                if root.findall(".//–¢–æ–≤–∞—Ä—ã/–¢–æ–≤–∞—Ä"): cat_map.update(_parse_catalog(root))
                if root.findall(".//–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"):
                    for k,v in _parse_offers(root).items(): off_map[k]=v
            items=[]; keys=set(cat_map.keys())|set(off_map.keys())
            for k in keys:
                base=cat_map.get(k,{}); price=off_map.get(k,{}).get("price"); stock=off_map.get(k,{}).get("stock")
                items.append({
                    "id":base.get("id",k),"sku":base.get("sku",k),"name":base.get("name",k),
                    "type":base.get("type",""),"brand":base.get("brand",""),"category":base.get("category",""),
                    "amp":base.get("amp"),"sqmm":base.get("sqmm"),"price":price,"stock":stock,
                    "image_url":base.get("image_url","")
                })
            return items
    return _one(xml_bytes)

def fetch_catalog(force=False):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ CATALOG_URL: YML (Tilda/–Ø–ú), CommerceML (XML/ZIP), JSON, CSV.
    """
    global catalog, catalog_last_fetch
    with catalog_lock:
        now = datetime.now(timezone.utc)  # ‚Üê timezone-aware
        if not force and catalog_last_fetch and now - catalog_last_fetch < timedelta(minutes=CATALOG_REFRESH_MIN):
            return False
        if not CATALOG_URL:
            log.warning("CATALOG_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞"); return False

        auth = (CATALOG_AUTH_USER, CATALOG_AUTH_PASS) if CATALOG_AUTH_USER else None
        try:
            r = requests.get(CATALOG_URL, auth=auth, timeout=60)
            r.raise_for_status()
            ct = (r.headers.get("content-type") or "").lower()
            url_l = CATALOG_URL.lower()

            items = []

            # 1) YML
            if "xml" in ct and url_l.endswith(".yml"):
                items = parse_tilda_yml(r.content)

            # 2) CommerceML / XML / ZIP (—Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ YML)
            elif "xml" in ct or "zip" in ct or url_l.endswith((".xml", ".zip")):
                try:
                    items = parse_commerceml(r.content)
                except Exception:
                    items = parse_tilda_yml(r.content)

            # 3) JSON
            elif "application/json" in ct or url_l.endswith(".json"):
                data = r.json()
                if not isinstance(data, list):
                    log.error("JSON –∫–æ—Ä–µ–Ω—å –Ω–µ —Å–ø–∏—Å–æ–∫"); return False
                items = data

            # 4) CSV
            elif "text/csv" in ct or url_l.endswith(".csv"):
                f = io.StringIO(r.text); reader = csv.DictReader(f)
                for row in reader:
                    def _i(v):
                        try: return int(str(v).strip().replace(" ", "")) if str(v).strip() else None
                        except: return None
                    def _f(v):
                        try: return float(str(v).replace(",", ".").strip()) if str(v).strip() else None
                        except: return None
                    items.append({
                        "id": row.get("id") or row.get("sku") or row.get("ID"),
                        "sku": row.get("sku") or row.get("SKU"),
                        "name": row.get("name") or row.get("Name"),
                        "type": (row.get("type") or "").lower(),
                        "brand": row.get("brand") or row.get("Brand"),
                        "category": row.get("category") or row.get("Category"),
                        "amp": _i(row.get("amp")), "sqmm": _i(row.get("sqmm")),
                        "price": _f(row.get("price")), "stock": _i(row.get("stock")),
                        "image_url": row.get("image_url") or row.get("image") or row.get("Image"),
                    })
            else:
                log.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–∞–ª–æ–≥–∞: %s", ct or url_l); return False

            # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            norm = []
            for p in items:
                if not p or not p.get("name"): 
                    continue
                p.setdefault("id", p.get("sku") or p.get("name"))
                p.setdefault("sku", p.get("id"))
                p.setdefault("brand",""); p.setdefault("category",""); p.setdefault("type","")
                norm.append(p)

            catalog = norm
            catalog_last_fetch = now
            log.info("–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: %d –ø–æ–∑–∏—Ü–∏–π (–∏–∑ %s)", len(catalog), CATALOG_URL)
            return True
        except Exception as e:
            traceback.print_exc(); log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: %s", e); return False

def periodic_refresh():
    try:
        fetch_catalog(force=False)
    finally:
        threading.Timer(CATALOG_REFRESH_MIN*60, periodic_refresh).start()

# ========================== Pyrogram (in_memory session) ==========================
app = Client(
    "my_bot",
    bot_token=BOT_TOKEN,
    api_id=API_ID,
    api_hash=API_HASH,
    in_memory=True  # ‚Üê –∫–ª—é—á–µ–≤–∞—è –ø—Ä–∞–≤–∫–∞: –Ω–µ —Å–æ–∑–¥–∞—ë—Ç/–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–µ—Å—Å–∏—é
)

# ========================== –ö–æ–º–∞–Ω–¥—ã / UI (–¢–æ–ª—å–∫–æ –õ–ò–ß–ù–´–ï —á–∞—Ç—ã) ==========================
@app.on_message(filters.private & filters.command("start"))
def start_handler(_, message):
    uid=message.from_user.id; chat_history[uid]=[]
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat:all"),
         InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="")],
        [InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="reset_ctx")]
    ])
    kb_main = ReplyKeyboardMarkup([[KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üîé –ü–æ–∏—Å–∫")],
                                   [KeyboardButton("üßπ –°–±—Ä–æ—Å")]], resize_keyboard=True)
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ ‚ö° –ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª.",
        reply_markup=kb_main
    )
    message.reply_text("–î–æ–ø. –º–µ–Ω—é:", reply_markup=kb_inline)

@app.on_message(filters.private & filters.command("help"))
def help_handler(_, message):
    message.reply_text("–ü–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª. –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É: –ö–∞—Ç–∞–ª–æ–≥ / –ü–æ–∏—Å–∫ / –°–±—Ä–æ—Å.")

@app.on_message(filters.private & filters.command("ping"))
def ping_handler(_, message): message.reply_text("pong ‚úÖ")

@app.on_message(filters.private & filters.command("catalog"))
def catalog_cmd(_, message): show_catalog(_, message)

def show_catalog(_, message):
    if not catalog: message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); return
    for p in catalog[:10]:
        try: send_product_message(message, p)
        except Exception: traceback.print_exc()

@app.on_message(filters.private & filters.command("find"))
def find_cmd(_, message):
    query=" ".join(message.command[1:]).strip(); handle_search_text(_, message, query)

def handle_search_text(_, message, text):
    if not text: message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–±–µ–ª—å 35–º–º, –∞–≤—Ç–æ–º–∞—Ç 400–ê ABB."); return
    if not catalog: message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."); return
    results=search_products_smart(text, limit=10)
    if results:
        for p in results:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return
    intent=parse_intent(text); alts=suggest_alternatives(intent, limit=6)
    if alts:
        message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
        for p in alts:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return
    message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üòï –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å: –±—Ä–µ–Ω–¥/—Ç–æ–∫/—Å–µ—á–µ–Ω–∏–µ.")

# ---------- Inline (–æ—Å—Ç–∞–≤–ª—è–µ–º; –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª–∏—á–∫–∏ –∫–Ω–æ–ø–∫–æ–π "–ò—Å–∫–∞—Ç—å –≤ —á–∞—Ç–µ") ----------
@app.on_inline_query()
def inline_query_handler(client, inline_query):
    q=inline_query.query.strip()
    if not q or not catalog: return
    results=search_products_smart(q, limit=25); items=[]
    for idx,p in enumerate(results):
        caption=product_caption(p); kb=product_keyboard(p); img=p.get("image_url")
        if img:
            items.append(InlineQueryResultPhoto(photo_url=img, thumb_url=img, caption=caption, reply_markup=kb, id=str(idx)))
        else:
            items.append(InlineQueryResultArticle(title=p.get("name","–¢–æ–≤–∞—Ä"),
                description=f"SKU: {p.get('sku','‚Äî')} | {p.get('price','‚Äî')} ‚ÇΩ",
                input_message_content=InputTextMessageContent(caption), reply_markup=kb, id=str(idx)))
    try:
        inline_query.answer(items, cache_time=5, is_personal=True)
    except Exception:
        traceback.print_exc()

# ---------- Callbacks ----------
@app.on_callback_query()
def callbacks_handler(client, cq):
    data=cq.data or ""
    if data=="reset_ctx":
        chat_history[cq.from_user.id]=[]; cq.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω"); cq.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω. /start"); return
    if data.startswith("reserve:"):
        pid=data.split(":",1)[1]; pending_reserve[cq.from_user.id]=pid
        cq.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"); cq.answer(); return
    if data.startswith("cat:"):
        cat_str=data.split(":",1)[1].strip().lower()
        items=[p for p in catalog if cat_str in ("all", str(p.get("category","")).lower())]
        if not items: cq.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ."); cq.answer(); return
        for p in items[:10]:
            try: send_product_message(cq.message, p)
            except Exception: traceback.print_exc()
        cq.answer()

# ---------- Sync ----------
@app.on_message(filters.private & filters.command("sync1c"))
def sync1c_handler(_, message):
    if TELEGRAM_ADMIN_ID and message.from_user.id != TELEGRAM_ADMIN_ID:
        message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return
    ok=fetch_catalog(force=True)
    message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

# ---------- –°–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ----------
@app.on_message(filters.private & filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help","ping"]))
def maybe_collect_phone(_, message):
    uid=message.from_user.id
    if uid in pending_reserve:
        pid=pending_reserve.get(uid); phone=(message.text or "").strip()
        if not PHONE_RE.match(phone):
            message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑."); return
        product=None
        for p in catalog:
            if p.get("id")==pid or p.get("sku")==pid: product=p; break
        text=("üßæ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
              f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
              f"–¢–æ–≤–∞—Ä: {product.get('name','') if product else pid}\n"
              f"SKU: {product.get('sku','‚Äî') if product else '‚Äî'}\n"
              f"–¶–µ–Ω–∞: {product.get('price','‚Äî') if product else '‚Äî'} ‚ÇΩ")
        pending_reserve.pop(uid, None)
        if MANAGER_CHAT_ID:
            try: _.send_message(MANAGER_CHAT_ID, text)
            except Exception: traceback.print_exc()
        message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòä")
        return

# ---------- /img ----------
@app.on_message(filters.private & filters.command("img"))
def image_handler(_, message):
    raw=" ".join(message.command[1:]).strip()
    if not raw: message.reply_text("–ù–∞–ø–∏—à–∏: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ --no —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏"); return
    user_neg=""
    if "--no" in raw:
        parts=raw.split("--no",1); raw=parts[0].strip(); user_neg=parts[1].strip()
    prompt_src=raw; prompt_en=translate_to_english(raw) if has_cyrillic(raw) else raw
    pos_prompt, neg_prompt = boost_prompt(prompt_en, user_negative=user_neg)
    try:
        model=(HF_IMAGE_MODEL or "stabilityai/sdxl-turbo").strip()
        url=f"https://api-inference.huggingface.co/models/{model}"
        headers={"Authorization": f"Bearer {HF_TOKEN}", "Accept":"image/png"}
        payload={"inputs":pos_prompt,"parameters":{"negative_prompt":neg_prompt,"num_inference_steps":24,"guidance_scale":7.0},"options":{"wait_for_model":True}}
        resp=requests.post(url, headers=headers, json=payload, timeout=180); ct=resp.headers.get("content-type","")
        if resp.status_code==200 and ct.startswith("image/"):
            bio=BytesIO(resp.content); bio.name="image.png"
            message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt_src or prompt_en}"); return
        if resp.status_code in (429,503): message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É ‚è≥"); return
        snippet=(getattr(resp,"text","") or "")[:800]; message.reply_text(f"‚ùå Hugging Face {resp.status_code}\n{snippet}")
    except Exception:
        traceback.print_exc(); message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ---------- –¢–µ–∫—Å—Ç (–ª–∏—á–∫–∞) ‚Üí –ø–æ–∏—Å–∫/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã/AI ----------
@app.on_message(filters.private & filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help","ping"]), group=1)
def text_handler(_, message):
    uid=message.from_user.id; user_text=(message.text or "").strip(); low=user_text.lower()
    if low in ("üì¶ –∫–∞—Ç–∞–ª–æ–≥","–∫–∞—Ç–∞–ª–æ–≥"): return show_catalog(_, message)
    if low in ("üîé –ø–æ–∏—Å–∫","–ø–æ–∏—Å–∫"): message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª."); return
    if low in ("üßπ —Å–±—Ä–æ—Å","—Å–±—Ä–æ—Å"): return reset_handler(_, message)

    if catalog:
        results=search_products_smart(user_text, limit=8)
        if results:
            for p in results:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return
        intent=parse_intent(user_text); alts=suggest_alternatives(intent, limit=6)
        if alts:
            message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
            for p in alts:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return

    if re.search(r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|hi|hello)\b", low):
        message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª, –∏–ª–∏ –∂–º–∏ ¬´üì¶ –ö–∞—Ç–∞–ª–æ–≥¬ª."); return

    chat_history[uid].append({"role":"user","content":user_text}); chat_history[uid]=clamp_history(chat_history[uid])
    try:
        payload={"model":OR_MODEL,"messages":[
            {"role":"system","content":"–¢—ã ‚Äî –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–æ–≥–∞–π –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            *chat_history[uid],
        ]}
        resp=requests.post("https://openrouter.ai/api/v1/chat/completions", headers=or_headers("TelegramBotNLSearch"),
                           json=payload, timeout=60, allow_redirects=False)
        if resp.status_code!=200: message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª, ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª."); return
        bot_reply=resp.json()["choices"][0]["message"]["content"].strip() or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        chat_history[uid].append({"role":"assistant","content":bot_reply}); chat_history[uid]=clamp_history(chat_history[uid])
        message.reply_text(bot_reply)
    except Exception:
        traceback.print_exc(); message.reply_text("–£–ø—Å, –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª. –ü—Ä–∏–º–µ—Ä: ¬´–∫–∞–±–µ–ª—å 35–º–º¬ª –∏–ª–∏ ¬´–∞–≤—Ç–æ–º–∞—Ç 400–ê ABB¬ª.")

# ---------- Reset ----------
@app.on_message(filters.private & filters.command("reset"))
def reset_handler(_, message):
    chat_history[message.from_user.id]=[]; message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ---------- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ----------
def _graceful_exit(sig, frame):
    logging.getLogger().info("Stop signal received (%s). Exiting...", sig)
    try: app.stop()
    finally: os._exit(0)
signal.signal(signal.SIGTERM, _graceful_exit)
signal.signal(signal.SIGINT, _graceful_exit)

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        if CATALOG_URL:
            if not fetch_catalog(force=True): log.warning("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ")
            periodic_refresh()
        app.run()
    except Exception:
        traceback.print_exc(); sys.exit(1)



















