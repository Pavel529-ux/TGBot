from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import sys
import requests
import traceback
from collections import defaultdict
import base64
from io import BytesIO
import logging

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID_STR,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
    sys.exit(1)

try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR)
    sys.exit(1)

# ---------- –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê ----------
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

def clamp_history(history):
    return history[-HISTORY_LIMIT:] if len(history) > HISTORY_LIMIT else history

def or_headers(title: str = "TelegramBot"):
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API)
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json", 
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

# ---------- PYROGRAM ----------
import signal
def _graceful_shutdown(*_):
    log.info("üõë –ü–æ–ª—É—á–µ–Ω SIGTERM ‚Äî –∑–∞–≤–µ—Ä—à–∞—é—Å—å (–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π).")
    sys.exit(0)
signal.signal(signal.SIGTERM, _graceful_shutdown)

app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@app.on_message(filters.command("start"))
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é ü§ñ\n"
        "‚Äî –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: —è —É—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–µ–ø–ª–∏–∫.\n"
        "‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ\n"
        "‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: /reset"
    )

@app.on_message(filters.command("reset"))
def reset_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ---------- –¢–ï–ö–°–¢ –° –ü–ê–ú–Ø–¢–¨–Æ ----------
@app.on_message(filters.text & ~filters.command(["start", "reset", "img"]))
def text_handler(_, message):
    uid = message.from_user.id
    user_text = message.text

    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": "openai/gpt-oss-120b",  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
            allow_redirects=False  
        )

        log.info("TEXT STATUS: %s", resp.status_code)
        log.info("TEXT RESP: %s", resp.text[:600])

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (text) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()
        bot_reply = data["choices"][0]["message"]["content"].strip()

        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ---------- –ö–ê–†–¢–ò–ù–ö–ò /img ----------
@app.on_message(filters.command("img"))
def image_handler(_, message):
    prompt = " ".join(message.command[1:]).strip()
    if not prompt:
        message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k")
        return

    try:
        img_payload = {
            "model": "stabilityai/stable-diffusion-xl",
            "prompt": prompt,
            "size": "1024x1024",
        }

        # OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π image-—ç–Ω–¥–ø–æ–∏–Ω—Ç —É OpenRouter
        resp = requests.post(
            "https://openrouter.ai/api/v1/images/generations",
            headers=or_headers("TelegramBotImages"),
            json=img_payload,
            timeout=120,
            allow_redirects=False
        )

        log.info("IMG STATUS: %s", resp.status_code)
        log.info("IMG TEXT: %s", resp.text[:1000])

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (image) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()
        item = None
        if isinstance(data, dict) and "data" in data and data["data"]:
            item = data["data"][0]

        if not item:
            message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API üòï")
            return

        if "url" in item and item["url"]:
            message.reply_photo(item["url"], caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
            return

        if "b64_json" in item and item["b64_json"]:
            try:
                img_bytes = base64.b64decode(item["b64_json"])
                bio = BytesIO(img_bytes)
                bio.name = "image.png"
                message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
                return
            except Exception:
                traceback.print_exc()
                message.reply_text("–ü–æ–ª—É—á–∏–ª base64, –Ω–æ –Ω–µ —Å–º–æ–≥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòï")
                return

        message.reply_text("API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üòï")

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run()  # –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –∏ –¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º
    except Exception:
        traceback.print_exc()
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ –≥–∞—Å–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–ª—á–∞
        sys.exit(1)










