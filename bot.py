from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import requests
import traceback
from collections import defaultdict

# ==== –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –±—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –º–æ–ª—á–∞
for k, v in {"BOT_TOKEN": BOT_TOKEN, "API_ID": API_ID, "API_HASH": API_HASH, "OPENROUTER_API_KEY": OPENROUTER_API_KEY}.items():
    if not v:
        print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {k} –Ω–µ –∑–∞–¥–∞–Ω–∞")
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ==== –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ====
# {user_id: [ {role: "user"/"assistant"/"system", content: "..."}, ... ]}
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

# ==== –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram ====
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ==== –ø–æ–º–æ—â–Ω–∏–∫–∏ ====
def or_headers(title: str = "TelegramBot"):
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏; Referer/Title –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

def clamp_history(history):
    if len(history) > HISTORY_LIMIT:
        return history[-HISTORY_LIMIT:]
    return history

# ==== –∫–æ–º–∞–Ω–¥—ã ====
@app.on_message(filters.command("start"))
def start_handler(client, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é ü§ñ\n"
        "‚Äî –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–æ 10 —Ä–µ–ø–ª–∏–∫).\n"
        "‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ\n"
        "‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: /reset"
    )

@app.on_message(filters.command("reset"))
def reset_handler(client, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ==== —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–∞–º—è—Ç—å—é ====
@app.on_message(filters.text & ~filters.command(["start", "reset", "img"]))
def text_handler(client_tg, message):
    uid = message.from_user.id
    user_text = message.text

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": "openai/gpt-oss-120b",  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        # –í–ù–ò–ú–ê–ù–ò–ï: —á–∞—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç ‚Äî /v1/chat/completions
        resp = requests.post(
            "https://openrouter.ai/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
        )

        print("TEXT STATUS:", resp.status_code)
        print("TEXT RESP:", resp.text[:500])  # –Ω–µ —à—É–º–∏–º –≤ –ª–æ–≥–∞—Ö

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (text) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()
        bot_reply = data["choices"][0]["message"]["content"].strip()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ==== –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ====
@app.on_message(filters.command("img"))
def image_handler(client_tg, message):
    prompt = " ".join(message.command[1:]).strip()
    if not prompt:
        message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k")
        return

    try:
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π generate-—ç–Ω–¥–ø–æ–∏–Ω—Ç OpenRouter
        img_payload = {
            "model": "stabilityai/stable-diffusion-xl",
            "prompt": prompt,
            # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é:
            # "size": "1024x1024",
            # "num_images": 1,
            # "steps": 28,
            # "cfg_scale": 7.5,
        }

        resp = requests.post(
            "https://openrouter.ai/api/v1/generate",
            headers=or_headers("TelegramBotImages"),
            json=img_payload,
            timeout=120,
        )

        print("IMG STATUS:", resp.status_code)
        print("IMG RESP:", resp.text[:500])

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (image) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()
        # —É —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è; —á–∞—â–µ –≤—Å–µ–≥–æ –µ—Å—Ç—å data[0].url
        try:
            img_url = data["data"][0]["url"]
        except Exception:
            # fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            img_url = (
                data.get("output", [{}])[0].get("url") or
                data.get("images", [{}])[0].get("url")
            )

        if not img_url:
            message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API üòï")
            return

        message.reply_photo(img_url, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ==== –∑–∞–ø—É—Å–∫ ====
print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
app.run()









