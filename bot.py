from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import sys
import requests
import traceback
from collections import defaultdict
import base64
from io import BytesIO
import logging
import signal

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
load_dotenv()

BOT_TOKEN          = os.getenv("BOT_TOKEN")
API_ID_STR         = os.getenv("API_ID")
API_HASH           = os.getenv("API_HASH")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
STABILITY_API_KEY  = os.getenv("STABILITY_API_KEY")

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∏–∫—Å –∏ –¥–ª–∏–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å)
log.info("OR key: %s... (len=%d)", (OPENROUTER_API_KEY or "")[:10], len(OPENROUTER_API_KEY or 0))
log.info("SDXL key: %s... (len=%d)", (STABILITY_API_KEY  or "")[:10], len(STABILITY_API_KEY  or 0))

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID_STR,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "STABILITY_API_KEY": STABILITY_API_KEY,
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
    sys.exit(1)

try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR)
    sys.exit(1)

# ---------- –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê ----------
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

def clamp_history(history):
    return history[-HISTORY_LIMIT:] if len(history) > HISTORY_LIMIT else history

def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

# ---------- SIGTERM ----------
def _graceful_shutdown(*_):
    log.info("üõë –ü–æ–ª—É—á–µ–Ω SIGTERM ‚Äî –∑–∞–≤–µ—Ä—à–∞—é—Å—å.")
    sys.exit(0)
signal.signal(signal.SIGTERM, _graceful_shutdown)

# ---------- PYROGRAM ----------
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@app.on_message(filters.command("start"))
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫ ü§ñ\n"
        "‚Äî –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏: —è —É—á–∏—Ç—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–ø–ª–∏–∫.\n"
        "‚Äî –ö–∞—Ä—Ç–∏–Ω–∫–∞: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k\n"
        "‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: /reset"
    )

@app.on_message(filters.command("reset"))
def reset_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ---------- –¢–ï–ö–°–¢ (OpenRouter) ----------
@app.on_message(filters.text & ~filters.command(["start", "reset", "img"]))
def text_handler(_, message):
    uid = message.from_user.id
    user_text = message.text

    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": "openai/gpt-oss-120b",  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
            allow_redirects=False
        )

        log.info("TEXT %s | %s", resp.status_code, resp.headers.get("content-type"))
        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter {resp.status_code}:\n{resp.text[:500]}")
            return

        data = resp.json()
        bot_reply = data["choices"][0]["message"]["content"].strip()

        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ---------- –ö–ê–†–¢–ò–ù–ö–ò (Stability SDXL) ----------
@app.on_message(filters.command("img"))
def image_handler(_, message):
    prompt = " ".join(message.command[1:]).strip()
    if not prompt:
        message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k")
        return

    try:
        url = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image"
        headers = {
            "Authorization": f"Bearer {STABILITY_API_KEY}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        body = {
            "text_prompts": [{"text": prompt}],
            "cfg_scale": 7,
            "height": 1024,
            "width": 1024,
            "samples": 1,
            "steps": 30
        }

        resp = requests.post(url, headers=headers, json=body, timeout=120)
        log.info("SDXL %s | %s", resp.status_code, resp.headers.get("content-type"))

        if resp.status_code != 200:
            message.reply_text(f"‚ùå Stability AI {resp.status_code}:\n{resp.text[:500]}")
            return

        data = resp.json()
        artifact = (data.get("artifacts") or [{}])[0]
        b64 = artifact.get("base64")
        if not b64:
            message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Stability üòï")
            return

        img_bytes = base64.b64decode(b64)
        bio = BytesIO(img_bytes)
        bio.name = "image.png"
        message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run()
    except Exception:
        traceback.print_exc()
        sys.exit(1)












