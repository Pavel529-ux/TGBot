# bot.py
from pyrogram import Client, filters, idle
from pyrogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent,
    ReplyKeyboardMarkup, KeyboardButton
)
from pyrogram.enums import ParseMode
from dotenv import load_dotenv
import os, sys, re, requests, traceback, logging, signal, threading, io, csv, zipfile, json
import xml.etree.ElementTree as ET
from collections import defaultdict, Counter, OrderedDict
from io import BytesIO
from datetime import datetime, timedelta, timezone
from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bot")
load_dotenv()

# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
HF_TOKEN = os.getenv("HF_TOKEN")

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ / –¥–µ—Ñ–æ–ª—Ç—ã
OR_MODEL = os.getenv("OR_TEXT_MODEL", "openai/gpt-oss-120b")
HF_IMAGE_MODEL = os.getenv("HF_IMAGE_MODEL", "stabilityai/sdxl-turbo")

CATALOG_URL = os.getenv("CATALOG_URL")
CATALOG_AUTH_USER = os.getenv("CATALOG_AUTH_USER")
CATALOG_AUTH_PASS = os.getenv("CATALOG_AUTH_PASS")
CATALOG_REFRESH_MIN = int(os.getenv("CATALOG_REFRESH_MIN", "30"))

TELEGRAM_ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0"))

AUTOSYNC_NOTIFY = os.getenv("AUTOSYNC_NOTIFY", "1") == "1"
AUTOSYNC_REMIND_EVERY_MIN = int(os.getenv("AUTOSYNC_REMIND_EVERY_MIN", "120"))

SECRET_EXPORT_TOKEN = os.getenv("SECRET_EXPORT_TOKEN")
HTTP_PORT = int(os.getenv("PORT", "8080"))

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN, "API_ID": API_ID_STR, "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY, "HF_TOKEN": HF_TOKEN
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing)); sys.exit(1)
try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR); sys.exit(1)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

def has_cyrillic(text: str) -> bool:
    return bool(re.search(r"[\u0400-\u04FF]", text or ""))

def translate_to_english(text: str) -> str:
    try:
        payload = {"model": OR_MODEL, "messages": [
            {"role": "system", "content": "Translate Russian to concise English. Return ONLY translated text."},
            {"role": "user", "content": text}
        ], "temperature": 0.2}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=or_headers("PromptTranslator"), json=payload,
                          timeout=40, allow_redirects=False)
        if r.status_code == 200 and r.headers.get("content-type","").startswith("application/json"):
            return r.json()["choices"][0]["message"]["content"].strip()
        log.warning("Translate HTTP %s | %s", r.status_code, r.text[:300])
    except Exception:
        traceback.print_exc()
    return text

def boost_prompt(en_prompt: str, user_negative: str = "") -> tuple[str, str]:
    base_pos = f"{en_prompt}, ultra-detailed, high quality, high resolution, sharp focus, intricate details, 8k, dramatic lighting"
    base_neg = "lowres, blurry, out of focus, pixelated, deformed, bad anatomy, extra fingers, watermark, text, signature"
    neg = (base_neg + ", " + user_negative) if user_negative else base_neg
    return base_pos, neg

PHONE_RE = re.compile(r"^\+?\d[\d\s\-()]{6,}$")

def slugify(s: str) -> str:
    return re.sub(r"[^a-z0-9\-]+", "_", (s or "").strip().lower())

def unslugify(slug: str, choices=None, fallback="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") -> str:
    if choices:
        for c in choices:
            if slugify(c) == slug: return c
    for c in catalog_index.get("categories", []):
        if slugify(c) == slug: return c
    return fallback

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–º—è—Ç—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
chat_history = defaultdict(list)
HISTORY_LIMIT = 10
def clamp_history(h): return h[-HISTORY_LIMIT:] if len(h) > HISTORY_LIMIT else h

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–∞—Ç–∞–ª–æ–≥ / –∫—ç—à ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
catalog = []               # –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä: {..., attrs: {–ù–∞–∑–≤–∞–Ω–∏–µ: –ó–Ω–∞—á–µ–Ω–∏–µ}}
catalog_last_fetch = None
catalog_lock = threading.Lock()
pending_reserve = {}       # user_id -> product_id

# –∏–Ω–¥–µ–∫—Å—ã
catalog_index = {
    "categories": [],
    "brands_by_cat": {},      # cat -> Counter(brand)
    "attrs_by_cat": {},       # cat -> {attr_name -> Counter(values)}
    "attr_steps_by_cat": {},  # cat -> [attr_name,...]
}
CAT_PAGE = 8
ITEMS_PAGE = 5
VALUES_PER_STEP = 8

# –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
_catalog_etag = None
_catalog_last_modified = None
_catalog_last_items = 0
_catalog_last_change = None
_last_reminder_at = None

# –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
def product_caption(p):
    price = p.get("price"); stock = p.get("stock")
    def _fmt_price(val):
        try:
            return f"{float(val):,.0f}".replace(",", " ")
        except Exception:
            return str(val)
    return "\n".join([
        f"üõí {p.get('name','')}",
        f"–ê—Ä—Ç–∏–∫—É–ª: {p.get('sku','‚Äî')}",
        f"–¶–µ–Ω–∞: {_fmt_price(price)} ‚ÇΩ" if price is not None else "–¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ",
        f"–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç." if stock is not None else "–ù–∞–ª–∏—á–∏–µ: —É—Ç–æ—á–Ω—è–π—Ç–µ",
    ])

def product_keyboard(p):
    pid = p.get("id") or p.get("sku")
    btns = [[InlineKeyboardButton("üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve:{pid}")]]
    if p.get("category"):
        btns.append([InlineKeyboardButton(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p['category']}", callback_data=f"cats:p:1")])
    btns.append([InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –≤ —á–∞—Ç–µ", switch_inline_query_current_chat=p.get("sku",""))])
    return InlineKeyboardMarkup(btns)

def send_product_message(message, p):
    img = p.get("image_url"); caption = product_caption(p); kb = product_keyboard(p)
    if img: message.reply_photo(img, caption=caption, reply_markup=kb)
    else:   message.reply_text(caption, reply_markup=kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞—Ä—Å–µ—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (YML, CommerceML) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _normalize_attr_name(n: str) -> str:
    n = (n or "").strip()
    replacements = {
        "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫, –ê": "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫, –ê",
        "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫": "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫, –ê",
        "–ö–∞—Ç—É—à–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –í": "–ö–∞—Ç—É—à–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –í",
        "–°—Ç–µ–ø–µ–Ω—å –∑–∞—â–∏—Ç—ã, IP": "–°—Ç–µ–ø–µ–Ω—å –∑–∞—â–∏—Ç—ã, IP",
        "IP": "–°—Ç–µ–ø–µ–Ω—å –∑–∞—â–∏—Ç—ã, IP",
        "–°–µ—Ä–∏—è": "–°–µ—Ä–∏—è",
        "–í–∏–¥ –ø—Ä–∏–≤–æ–¥–∞": "–í–∏–¥ –ø—Ä–∏–≤–æ–¥–∞",
        "–í –∫–æ—Ä–ø—É—Å–µ": "–í –∫–æ—Ä–ø—É—Å–µ",
        "–° —Ç–µ–ø–ª–æ–≤—ã–º —Ä–µ–ª–µ": "–° —Ç–µ–ø–ª–æ–≤—ã–º —Ä–µ–ª–µ",
        "–ß–∏—Å–ª–æ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": "–ß–∏—Å–ª–æ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
    }
    return replacements.get(n, n)

def parse_tilda_yml(xml_bytes: bytes) -> list[dict]:
    root = ET.fromstring(xml_bytes)
    cat_map = {}
    for c in root.findall(".//categories/category"):
        cid = c.get("id") or ""
        name = (c.text or "").strip()
        if cid: cat_map[cid] = name
    items = []
    for o in root.findall(".//offers/offer"):
        sku = o.get("id") or (o.findtext("vendorCode") or "")
        name = o.findtext("name") or ""
        brand = o.findtext("vendor") or ""
        price = o.findtext("price")
        img = o.findtext("picture") or ""
        cat_id = o.findtext("categoryId") or ""
        category = cat_map.get(cat_id, "") or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

        attrs = {}
        for prm in o.findall("param"):
            an = prm.get("name") or ""
            av = (prm.text or "").strip()
            if not an or not av: continue
            attrs[_normalize_attr_name(an)] = av

        low_blob = " ".join([name] + [f"{k}: {v}" for k,v in attrs.items()]).lower()
        itype = "–∫–∞–±–µ–ª—å" if "–∫–∞–±–µ–ª" in low_blob else (
            "–∞–≤—Ç–æ–º–∞—Ç" if ("–∞–≤—Ç–æ–º–∞—Ç" in low_blob or "–≤—ã–∫–ª—é—á–∞—Ç" in low_blob) else (
                "–ø—É—Å–∫–∞—Ç–µ–ª—å" if "–ø—É—Å–∫–∞—Ç–µ–ª" in low_blob else ""
            )
        )
        amp = None; sqmm = None
        m_amp = re.search(r"(\d{2,3})\s*–∞\b", low_blob)
        if m_amp: amp = int(m_amp.group(1))
        m_sq = re.search(r"(\d{1,3})\s*–º–º[¬≤2]|\b(\d{1,3})\s*sqmm", low_blob)
        if m_sq: sqmm = int([g for g in m_sq.groups() if g][0])

        items.append({
            "id": sku or name, "sku": sku or name, "name": name,
            "type": itype, "brand": brand, "category": category,
            "amp": amp, "sqmm": sqmm,
            "price": float(price) if price else None,
            "stock": None, "image_url": img,
            "attrs": attrs
        })
    return items

def parse_commerceml(xml_bytes: bytes) -> list[dict]:
    def _attrs_from(root, node):
        attrs = {}
        for z in node.findall(".//–ó–Ω–∞—á–µ–Ω–∏—è–°–≤–æ–π—Å—Ç–≤/–ó–Ω–∞—á–µ–Ω–∏—è–°–≤–æ–π—Å—Ç–≤–∞"):
            an = z.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or ""
            av = z.findtext("–ó–Ω–∞—á–µ–Ω–∏–µ") or ""
            if an and av:
                attrs[_normalize_attr_name(an)] = av.strip()
        for z in node.findall(".//–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏–¢–æ–≤–∞—Ä–∞/–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–¢–æ–≤–∞—Ä–∞"):
            an = z.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or ""
            av = z.findtext("–ó–Ω–∞—á–µ–Ω–∏–µ") or ""
            if an and av:
                attrs[_normalize_attr_name(an)] = av.strip()
        return attrs

    def _parse_catalog(root):
        cat={}
        for t in root.findall(".//–¢–æ–≤–∞—Ä—ã/–¢–æ–≤–∞—Ä"):
            _id=(t.findtext("–ò–¥") or "").strip()
            name=(t.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or "").strip()
            sku=(t.findtext("–ê—Ä—Ç–∏–∫—É–ª") or "") or _id
            brand=(t.findtext("–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å/–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or t.findtext("–ë—Ä–µ–Ω–¥") or "").strip()
            image=(t.findtext("–ö–∞—Ä—Ç–∏–Ω–∫–∞") or "").strip()
            catref=t.find(".//–ì—Ä—É–ø–ø—ã/–ò–¥"); category=(catref.text or "").strip() if catref is not None else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            attrs = _attrs_from(root, t)

            low = f"{name} {json.dumps(attrs, ensure_ascii=False)}".lower()
            itype="–∫–∞–±–µ–ª—å" if "–∫–∞–±–µ–ª" in low else ("–∞–≤—Ç–æ–º–∞—Ç" if ("–∞–≤—Ç–æ–º–∞—Ç" in low or "–≤—ã–∫–ª—é—á–∞—Ç" in low) else ("–ø—É—Å–∫–∞—Ç–µ–ª—å" if "–ø—É—Å–∫–∞—Ç–µ–ª" in low else ""))
            amp=sqmm=None
            m_amp=re.search(r"(\d{2,3})\s*–∞\b", low); m_sq=re.search(r"(\d{1,3})\s*–º–º[¬≤2]|\b(\d{1,3})\s*sqmm", low)
            if m_amp: amp=int(m_amp.group(1))
            if m_sq:  sqmm=int([g for g in m_sq.groups() if g][0])
            if _id:
                cat[_id]={"id":_id,"sku":sku,"name":name or sku,"brand":brand,"category":category,
                          "image_url":image,"type":itype,"amp":amp,"sqmm":sqmm,"attrs":attrs}
        for g in root.findall(".//–ì—Ä—É–ø–ø—ã/–ì—Ä—É–ø–ø–∞"):
            gid=(g.findtext("–ò–¥") or "").strip(); gname=(g.findtext("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ") or "").strip()
            if gid and gname:
                for v in cat.values():
                    if v.get("category")==gid: v["category"]=gname or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        return cat

    def _parse_offers(root):
        offers={}
        for o in root.findall(".//–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"):
            _id=(o.findtext("–ò–¥") or "").strip()
            if not _id: continue
            price=None; qnode=o.find(".//–¶–µ–Ω—ã/–¶–µ–Ω–∞/–¶–µ–Ω–∞–ó–∞–ï–¥–∏–Ω–∏—Ü—É")
            if qnode is not None and qnode.text:
                try: price=float(qnode.text.replace(",", ".").strip())
                except: price=None
            stock=None; qty=o.find("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            if qty is not None and qty.text:
                try: stock=int(float(qty.text.replace(",", ".").strip()))
                except: stock=None
            offers[_id]={"price":price,"stock":stock}
        return offers

    def _one(xml_b: bytes):
        root=ET.fromstring(xml_b); cat_map=_parse_catalog(root); off_map=_parse_offers(root)
        items=[]; keys=set(cat_map.keys())|set(off_map.keys())
        for k in keys:
            base=cat_map.get(k,{}); price=off_map.get(k,{}).get("price"); stock=off_map.get(k,{}).get("stock")
            items.append({
                "id":base.get("id",k),"sku":base.get("sku",k),"name":base.get("name",k),
                "type":base.get("type",""),"brand":base.get("brand",""),"category":base.get("category","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                "amp":base.get("amp"),"sqmm":base.get("sqmm"),"price":price,"stock":stock,
                "image_url":base.get("image_url",""),
                "attrs": base.get("attrs", {})
            })
        return items

    if zipfile.is_zipfile(io.BytesIO(xml_bytes)):
        with zipfile.ZipFile(io.BytesIO(xml_bytes)) as z:
            cat_map, off_map = {}, {}
            for name in z.namelist():
                if not name.lower().endswith(".xml"): continue
                data=z.read(name); root=ET.fromstring(data)
                if root.findall(".//–¢–æ–≤–∞—Ä—ã/–¢–æ–≤–∞—Ä"): cat_map.update({k:v for k,v in _parse_catalog(root).items()})
                if root.findall(".//–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"):
                    for k,v in _parse_offers(root).items(): off_map[k]=v
            items=[]; keys=set(cat_map.keys())|set(off_map.keys())
            for k in keys:
                base=cat_map.get(k,{}); price=off_map.get(k,{}).get("price"); stock=off_map.get(k,{}).get("stock")
                items.append({
                    "id":base.get("id",k),"sku":base.get("sku",k),"name":base.get("name",k),
                    "type":base.get("type",""),"brand":base.get("brand",""),"category":base.get("category","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                    "amp":base.get("amp"),"sqmm":base.get("sqmm"),"price":price,"stock":stock,
                    "image_url":base.get("image_url",""),
                    "attrs": base.get("attrs", {})
                })
            return items
    return _one(xml_bytes)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def rebuild_index():
    global catalog_index
    cats = [str(p.get("category","")).strip() or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" for p in catalog]
    cat_counts = Counter(cats)
    categories = [c for c,_ in cat_counts.most_common()]

    brands_by_cat = defaultdict(Counter)
    attrs_by_cat = defaultdict(lambda: defaultdict(Counter))

    for p in catalog:
        cat = str(p.get("category","")).strip() or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        brand = (p.get("brand") or "").strip()
        if brand: brands_by_cat[cat][brand] += 1
        attrs = dict(p.get("attrs") or {})
        if brand: attrs.setdefault("–ë—Ä–µ–Ω–¥", brand)
        if isinstance(p.get("stock"), (int,float)):
            attrs.setdefault("–ù–∞–ª–∏—á–∏–µ", "–í –Ω–∞–ª–∏—á–∏–∏" if p["stock"] > 0 else "–ü–æ–¥ –∑–∞–∫–∞–∑")
        for an,av in attrs.items():
            an_norm = _normalize_attr_name(an)
            av_norm = str(av).strip()
            if not an_norm or not av_norm: continue
            attrs_by_cat[cat][an_norm][av_norm] += 1

    steps_by_cat = {}
    for cat, amap in attrs_by_cat.items():
        keys = list(amap.keys())
        def _key_rank(k):
            if k.lower() == "–±—Ä–µ–Ω–¥": return (0, -sum(amap[k].values()))
            if k.lower() == "–Ω–∞–ª–∏—á–∏–µ": return (1, -sum(amap[k].values()))
            return (2, -sum(amap[k].values()))
        keys.sort(key=_key_rank)
        steps_by_cat[cat] = keys

    catalog_index = {
        "categories": categories,
        "brands_by_cat": brands_by_cat,
        "attrs_by_cat": attrs_by_cat,
        "attr_steps_by_cat": steps_by_cat,
    }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ + –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_catalog(force=False):
    global catalog, catalog_last_fetch, _catalog_etag, _catalog_last_modified
    global _catalog_last_items, _catalog_last_change

    with catalog_lock:
        now = datetime.now(timezone.utc)
        if not force and catalog_last_fetch and now - catalog_last_fetch < timedelta(minutes=CATALOG_REFRESH_MIN):
            return False
        if not CATALOG_URL:
            log.warning("CATALOG_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞")
            return False

        headers = {}
        if _catalog_etag: headers["If-None-Match"] = _catalog_etag
        if _catalog_last_modified: headers["If-Modified-Since"] = _catalog_last_modified
        auth = (CATALOG_AUTH_USER, CATALOG_AUTH_PASS) if CATALOG_AUTH_USER else None

        try:
            try:
                h = requests.head(CATALOG_URL, auth=auth, timeout=20)
                if h.status_code in (200, 304):
                    lm = h.headers.get("Last-Modified"); et = h.headers.get("ETag")
                    if not force and et and _catalog_etag and et == _catalog_etag:
                        catalog_last_fetch = now; return False
                    if not force and lm and _catalog_last_modified and lm == _catalog_last_modified:
                        catalog_last_fetch = now; return False
            except Exception:
                pass

            r = requests.get(CATALOG_URL, auth=auth, timeout=60, headers=headers)
            if r.status_code == 304:
                catalog_last_fetch = now; return False
            r.raise_for_status()

            ct = (r.headers.get("content-type") or "").lower()
            url_l = CATALOG_URL.lower()

            if "xml" in ct and url_l.endswith(".yml"):
                items = parse_tilda_yml(r.content)
            elif "xml" in ct or "zip" in ct or url_l.endswith((".xml", ".zip")):
                try: items = parse_commerceml(r.content)
                except Exception: items = parse_tilda_yml(r.content)
            elif "application/json" in ct or url_l.endswith(".json"):
                data = r.json()
                if not isinstance(data, list): log.error("JSON –∫–æ—Ä–µ–Ω—å –Ω–µ —Å–ø–∏—Å–æ–∫"); return False
                items = data
            elif "text/csv" in ct or url_l.endswith(".csv"):
                f = io.StringIO(r.text); reader = csv.DictReader(f); items=[]
                for row in reader:
                    def _i(v):
                        try: return int(str(v).strip().replace(" ", "")) if str(v).strip() else None
                        except: return None
                    def _f(v):
                        try: return float(str(v).replace(",", ".").strip()) if str(v).strip() else None
                        except: return None
                    items.append({
                        "id": row.get("id") or row.get("sku") or row.get("ID"),
                        "sku": row.get("sku") or row.get("SKU"),
                        "name": row.get("name") or row.get("Name"),
                        "type": (row.get("type") or "").lower(),
                        "brand": row.get("brand") or row.get("Brand"),
                        "category": (row.get("category") or row.get("Category") or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                        "amp": _i(row.get("amp")), "sqmm": _i(row.get("sqmm")),
                        "price": _f(row.get("price")), "stock": _i(row.get("stock")),
                        "image_url": row.get("image_url") or row.get("image") or row.get("Image"),
                        "attrs": {}
                    })
            else:
                log.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–∞–ª–æ–≥–∞: %s", ct or url_l); return False

            norm=[]
            for p in items:
                if not p or not p.get("name"): 
                    continue
                p.setdefault("id", p.get("sku") or p.get("name"))
                p.setdefault("sku", p.get("id"))
                p.setdefault("brand",""); p.setdefault("category","–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"); p.setdefault("type","")
                p.setdefault("attrs", {})
                norm.append(p)
            catalog = norm
            catalog_last_fetch = now

            new_etag = r.headers.get("ETag"); new_lm = r.headers.get("Last-Modified")
            if new_etag: _catalog_etag = new_etag
            if new_lm: _catalog_last_modified = new_lm

            changed = (len(catalog) != _catalog_last_items)
            _catalog_last_items = len(catalog)
            if changed: _catalog_last_change = now

            rebuild_index()

            log.info("–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: %d –ø–æ–∑–∏—Ü–∏–π (–∏–∑ %s)", len(catalog), CATALOG_URL)

            if AUTOSYNC_NOTIFY and TELEGRAM_ADMIN_ID and changed:
                try:
                    if getattr(app, "is_connected", False):
                        app.send_message(
                            TELEGRAM_ADMIN_ID,
                            f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: {len(catalog)} –ø–æ–∑–∏—Ü–∏–π\n–ò—Å—Ç–æ—á–Ω–∏–∫: {CATALOG_URL}"
                        )
                except Exception:
                    traceback.print_exc()
            return True

        except Exception as e:
            traceback.print_exc()
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: %s", e)
            return False

def periodic_refresh():
    global _last_reminder_at
    try:
        updated = fetch_catalog(force=False)
        now = datetime.now(timezone.utc)
        if TELEGRAM_ADMIN_ID and AUTOSYNC_NOTIFY and AUTOSYNC_REMIND_EVERY_MIN > 0:
            last_change = _catalog_last_change or catalog_last_fetch
            if last_change:
                due_change = now - last_change >= timedelta(minutes=AUTOSYNC_REMIND_EVERY_MIN)
                due_rem = (not _last_reminder_at) or (now - _last_reminder_at >= timedelta(minutes=AUTOSYNC_REMIND_EVERY_MIN))
                if not updated and due_change and due_rem:
                    try:
                        if getattr(app, "is_connected", False):
                            app.send_message(
                                TELEGRAM_ADMIN_ID,
                                "‚ÑπÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è. –ï—Å–ª–∏ –≤ Tilda –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–°, "
                                "–Ω–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç¬ª –≤ Tilda, –∑–∞—Ç–µ–º ¬´–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥¬ª –≤ –±–æ—Ç–µ."
                            )
                            _last_reminder_at = now
                    except Exception:
                        traceback.print_exc()
    finally:
        threading.Timer(CATALOG_REFRESH_MIN * 60, periodic_refresh).start()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HTTP-—Ö—É–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class _HookHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            url = urlparse(self.path)
            if url.path != "/hook/tilda-export":
                self.send_response(404); self.end_headers(); self.wfile.write(b"Not found"); return
            qs = parse_qs(url.query or ""); token = (qs.get("token") or [""])[0]
            if SECRET_EXPORT_TOKEN and token != SECRET_EXPORT_TOKEN:
                self.send_response(401); self.end_headers(); self.wfile.write(b"Unauthorized"); return
            ok = fetch_catalog(force=True)
            try:
                if TELEGRAM_ADMIN_ID and getattr(app, "is_connected", False):
                    app.send_message(TELEGRAM_ADMIN_ID, ("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ" if ok else "‚ÑπÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (304)") + f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {CATALOG_URL}")
            except Exception:
                traceback.print_exc()
            self.send_response(200); self.end_headers(); self.wfile.write(b"OK")
        except Exception:
            traceback.print_exc()
            try: self.send_response(500); self.end_headers(); self.wfile.write(b"ERROR")
            except Exception: pass

def _run_http_server():
    try:
        srv = ThreadingHTTPServer(("0.0.0.0", HTTP_PORT), _HookHandler)
        log.info("HTTP hook server on port %s started", HTTP_PORT)
        srv.serve_forever()
    except Exception:
        traceback.print_exc()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ / –Ω–∞–º–µ—Ä–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
INTENT = re.compile(
    r"(?P<what>–∫–∞–±–µ–ª—å|–ø—Ä–æ–≤–æ–¥|–∞–≤—Ç–æ–º–∞—Ç|–≤—ã–∫–ª—é—á–∞—Ç–µ–ª[—å—è—å]|–ø—É—Å–∫–∞—Ç–µ–ª[—å—è–∏])?"
    r".*?(?P<num>\d{1,3})\s*(?P<unit>–º–º2|–º–º¬≤|–º–º|sqmm|–∞|a)?",
    re.IGNORECASE
)
def parse_intent(text: str):
    t = (text or "").lower(); brand=None
    for b in ("abb","schneider","iek","legrand","hager","siemens","rexant","sevkabel"):
        if b in t: brand=b; break
    itype=sqmm=amp=None; m=INTENT.search(t)
    if m:
        what=(m.group("what") or ""); unit=(m.group("unit") or "").lower()
        try: n=int(m.group("num"))
        except: n=None
        if what.startswith("–∫–∞–±–µ–ª—å") or "–ø—Ä–æ–≤–æ–¥" in what: itype="–∫–∞–±–µ–ª—å"
        elif what.startswith("–∞–≤—Ç–æ–º–∞—Ç") or "–≤—ã–∫–ª—é—á–∞—Ç–µ–ª" in what: itype="–∞–≤—Ç–æ–º–∞—Ç"
        elif "–ø—É—Å–∫–∞—Ç–µ–ª" in what: itype="–ø—É—Å–∫–∞—Ç–µ–ª—å"
        if n is not None:
            if unit in ("–º–º2","–º–º¬≤","–º–º","sqmm"): sqmm=n; itype=itype or "–∫–∞–±–µ–ª—å"
            elif unit in ("–∞","a"): amp=n; itype=itype or "–∞–≤—Ç–æ–º–∞—Ç"
    return {"type": itype, "sqmm": sqmm, "amp": amp, "brand": brand}

def search_products(q, limit=10):
    q=(q or "").strip().lower(); res=[]
    for it in catalog:
        hay=f"{str(it.get('name','')).lower()} {str(it.get('sku','')).lower()} {str(it.get('brand','')).lower()}"
        if q in hay:
            res.append(it)
            if len(res)>=limit: break
    return res

def search_products_smart(qtext: str, limit=10):
    intent=parse_intent(qtext); q=(qtext or "").strip().lower(); scored=[]
    for p in catalog:
        name=str(p.get("name","")).lower(); sku=str(p.get("sku","")).lower()
        brand=str(p.get("brand","")).lower(); ptype=str(p.get("type","")).lower()
        amp=p.get("amp"); sq=p.get("sqmm"); score=0
        if intent["type"]:
            if intent["type"] not in ptype: continue
            score+=2
        if intent["amp"] and isinstance(amp,(int,float)):
            score+=3 if amp==intent["amp"] else (2 if abs(amp-intent["amp"])<=10 else 0)
        if intent["sqmm"] and isinstance(sq,(int,float)):
            score+=3 if sq==intent["sqmm"] else (2 if abs(sq-intent["sqmm"])<=5 else 0)
        if intent["brand"] and intent["brand"] in brand: score+=2
        if q and q in f"{name} {sku} {brand} {ptype}": score+=1
        if score>0: scored.append((score,p))
    if not scored: return search_products(qtext, limit=limit)
    scored.sort(key=lambda x:x[0], reverse=True)
    return [p for _,p in scored[:limit]]

def suggest_alternatives(intent, limit=6):
    if not intent["type"]: return []
    key="amp" if intent["type"] in ("–∞–≤—Ç–æ–º–∞—Ç","–ø—É—Å–∫–∞—Ç–µ–ª—å") else "sqmm"
    target=intent["amp"] if key=="amp" else intent["sqmm"]
    if not target: return []
    al=[]
    for p in catalog:
        if intent["type"] not in str(p.get("type","")).lower(): continue
        val=p.get(key)
        if isinstance(val,(int,float)): al.append((abs(val-target), p))
    al.sort(key=lambda x:x[0]); return [p for _,p in al[:limit]]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ (–ù–û–í–û–ï) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _norm(s):
    return re.sub(r"\s+", " ", str(s or "")).strip().lower()

def filter_items_by_advanced(category: str, selections: OrderedDict) -> list[dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º (–º–∞—Å—Ç–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞, –º—è–≥–∫–∏–π –º–∞—Ç—á –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ, "–ë—Ä–µ–Ω–¥", "–ù–∞–ª–∏—á–∏–µ".
    """
    if not catalog:
        return []

    want_cat = (_norm(category) if category else "")
    sel = selections or OrderedDict()

    want_brand = _norm(sel.get("–ë—Ä–µ–Ω–¥", ""))
    want_avail = (sel.get("–ù–∞–ª–∏—á–∏–µ", "") or "").strip().lower()
    attr_pairs = [(k, str(v)) for k, v in sel.items() if k not in ("–ë—Ä–µ–Ω–¥", "–ù–∞–ª–∏—á–∏–µ")]

    def ok_availability(p):
        if not want_avail:
            return True
        stock = p.get("stock")
        if not isinstance(stock, (int, float)):
            return want_avail not in ("–≤ –Ω–∞–ª–∏—á–∏–∏", "–ø–æ–¥ –∑–∞–∫–∞–∑")
        return (want_avail == "–≤ –Ω–∞–ª–∏—á–∏–∏" and stock > 0) or (want_avail == "–ø–æ–¥ –∑–∞–∫–∞–∑" and stock <= 0)

    def ok_brand(p):
        if not want_brand:
            return True
        return want_brand in _norm(p.get("brand"))

    def ok_attrs(p):
        if not attr_pairs:
            return True
        p_attrs = { _normalize_attr_name(k): str(v) for k, v in (p.get("attrs") or {}).items() }
        for ak, av in attr_pairs:
            ak_norm = _normalize_attr_name(ak)
            pv = str(p_attrs.get(ak_norm, ""))
            if _norm(av) not in _norm(pv):
                return False
        return True

    res = []
    for it in catalog:
        if want_cat and _norm(it.get("category")) != want_cat:
            continue
        if not ok_brand(it):
            continue
        if not ok_availability(it):
            continue
        if not ok_attrs(it):
            continue
        res.append(it)

    def _key(p):
        stock = p.get("stock")
        have = 1 if (isinstance(stock, (int, float)) and stock > 0) else 0
        price = p.get("price")
        price = float(price) if isinstance(price, (int, float)) else float("inf")
        brand = _norm(p.get("brand"))
        return (-have, price, brand)

    res.sort(key=_key)
    return res

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–ò–õ–¨–¢–†–´ (Stateful Wizard v2) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WIZ2 = {}  # key=(chat_id, msg_id) ‚Üí {"cat": str_slug, "i": int, "sel": OrderedDict()}

def _cat_steps(cat):
    return catalog_index.get("attr_steps_by_cat", {}).get(cat, [])

def _cat_attr_values(cat, attr):
    return [v for v,_ in catalog_index.get("attrs_by_cat", {}).get(cat, {}).get(attr, Counter()).most_common()]

def _w2_key_from_cq(cq):
    return (cq.message.chat.id, cq.message.id)

def _w2_get(cat_slug, key=None):
    return WIZ2.get(key)

def _w2_set(key, data):
    WIZ2[key] = data

def build_cat_list_kb(page: int = 1):
    cats = catalog_index.get("categories", [])
    total = len(cats)
    if total == 0:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="cats:refresh")]])
    pages = max(1, (total + CAT_PAGE - 1) // CAT_PAGE)
    page = max(1, min(page, pages))
    start = (page - 1) * CAT_PAGE
    chunk = cats[start:start+CAT_PAGE]
    rows = []
    for c in chunk:
        rows.append([InlineKeyboardButton(f"{c}", callback_data=f"fw2start:{slugify(c)}")])
    nav = []
    if page > 1: nav.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"cats:p:{page-1}"))
    if page < pages: nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"cats:p:{page+1}"))
    if nav: rows.append(nav)
    return InlineKeyboardMarkup(rows)

def wizard2_text(cat_slug: str, i: int, selections: OrderedDict):
    cat = unslugify(cat_slug)
    steps = _cat_steps(cat)
    lines = [f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>",
             "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ú–æ–∂–Ω–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –ª—é–±–æ–π —à–∞–≥ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å ‚úÖ¬ª –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."]
    if steps:
        for idx, an in enumerate(steps):
            mark = "‚úÖ" if an in selections else "‚Äî"
            val = selections.get(an, "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
            pointer = " ‚Üê —Å–µ–π—á–∞—Å" if idx == i else ""
            lines.append(f"{idx+1}) {an}: <b>{val}</b> {mark}{pointer}")
    else:
        lines.append("<i>–î–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤.</i>")
    return "\n".join(lines)

def kb_wizard2(cat_slug: str, i: int, selections: OrderedDict):
    cat = unslugify(cat_slug)
    steps = _cat_steps(cat)
    rows = []

    if steps and 0 <= i < len(steps):
        an = steps[i]
        values = _cat_attr_values(cat, an)[:VALUES_PER_STEP]
        if values:
            for vidx, v in enumerate(values):
                rows.append([InlineKeyboardButton(v, callback_data=f"fw2v:{i}:{vidx}")])
        else:
            rows.append([InlineKeyboardButton("–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π", callback_data="noop")])

        rows.append([
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"fw2skip:{i}"),
            InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å ‚úÖ", callback_data=f"fw2show")
        ])

        nav = []
        if i > 0:
            nav.append(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"fw2back:{i}"))
        nav.append(InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"fw2reset"))
        rows.append(nav)
    else:
        rows.append([InlineKeyboardButton("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data=f"fw2show")])
        rows.append([InlineKeyboardButton("‚Üê –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="cats:p:1")])

    rows.append([InlineKeyboardButton("‚Üê –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cats:p:1")])
    return InlineKeyboardMarkup(rows)

def wizard2_edit_message(cq):
    key = _w2_key_from_cq(cq)
    state = _w2_get(None, key=key)
    if not state:
        return
    txt = wizard2_text(state["cat"], state["i"], state["sel"])
    kb  = kb_wizard2(state["cat"], state["i"], state["sel"])
    try:
        cq.message.edit_text(txt, reply_markup=kb)
    except Exception:
        cq.message.reply_text(txt, reply_markup=kb)

def wizard2_show_results(cq):
    key = _w2_key_from_cq(cq)
    state = _w2_get(None, key=key)
    if not state:
        return
    cat = unslugify(state["cat"])
    selections = state["sel"]
    items = filter_items_by_advanced(cat, selections)
    header = f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ¬´{cat}¬ª"
    if selections:
        pretty = ", ".join([f"{k}: {v}" for k,v in selections.items()])
        header += f"\n–§–∏–ª—å—Ç—Ä—ã: {pretty}"
    header += f"\n–ù–∞–π–¥–µ–Ω–æ: {len(items)} —à—Ç."
    try:
        cq.message.edit_text(header)
    except Exception:
        cq.message.reply_text(header)
    for p in items[:20]:
        try: send_product_message(cq.message, p)
        except Exception: traceback.print_exc()
    if len(items) > 20:
        cq.message.reply_text(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 –∏–∑ {len(items)}. –£—Ç–æ—á–Ω–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Pyrogram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Client(
    "my_bot",
    bot_token=BOT_TOKEN,
    api_id=API_ID,
    api_hash=API_HASH,
    in_memory=True,
    parse_mode=ParseMode.HTML
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã / UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def reply_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("üè† –°—Ç–∞—Ä—Ç"), KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üîé –ü–æ–∏—Å–∫")],
        [KeyboardButton("üßπ –°–±—Ä–æ—Å")]
    ]
    if user_id == TELEGRAM_ADMIN_ID:
        rows.insert(1, [KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥")])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

@app.on_message(filters.private & filters.command("start"))
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    kb_main = reply_main_keyboard(uid)
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ ‚ö° –í—ã–±–∏—Ä–∞–π ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª ‚Üí —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —à–∞–≥–∞–º (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏), "
        "–∏–ª–∏ –ø–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä 25–ê –∫–∞—Ç—É—à–∫–∞ 220–í IP20¬ª.",
        reply_markup=kb_main
    )
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cats:p:1")]
    ])
    message.reply_text("–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é:", reply_markup=kb_inline)

@app.on_message(filters.private & filters.text & filters.regex(r"^(üè† –°—Ç–∞—Ä—Ç|–°—Ç–∞—Ä—Ç|–ú–µ–Ω—é|–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"))
def start_button_handler(_, message):
    return start_handler(_, message)

@app.on_message(filters.private & filters.command("help"))
def help_handler(_, message):
    message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –º–∞—Å—Ç–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —à–∞–≥–∞–º (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏). –ú–æ–∂–Ω–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª —à–∞–≥ –∏–ª–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å¬ª. –ö–Ω–æ–ø–∫–∞ ¬´üè† –°—Ç–∞—Ä—Ç¬ª ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

def show_catalog(_, message):
    if not catalog: message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); return
    for p in catalog[:10]:
        try: send_product_message(message, p)
        except Exception: traceback.print_exc()

@app.on_message(filters.private & filters.command("catalog"))
def catalog_cmd(_, message): show_catalog(_, message)

@app.on_message(filters.private & filters.command("find"))
def find_cmd(_, message):
    query=" ".join(message.command[1:]).strip(); handle_search_text(_, message, query)

def handle_search_text(_, message, text):
    if not text: message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä 25–ê –∫–∞—Ç—É—à–∫–∞ 220–í IP20."); return
    if not catalog: message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."); return
    results=search_products_smart(text, limit=10)
    if results:
        for p in results:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return
    intent=parse_intent(text); alts=suggest_alternatives(intent, limit=6)
    if alts:
        message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
        for p in alts:
            try: send_product_message(message, p)
            except Exception: traceback.print_exc()
        return
    message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üòï –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–∫—Ä–æ–π ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Callback‚Äô–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@app.on_callback_query()
def callbacks_handler(client, cq):
    try:
        data=cq.data or ""

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ù–û–í–û–ï)
        if data.startswith("reserve:"):
            pid = data.split(":", 1)[1]
            user_id = cq.from_user.id
            pending_reserve[user_id] = pid
            try:
                cq.message.reply_text(
                    "–û–∫–µ–π! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ üìû\n"
                    "–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67"
                )
            except Exception:
                traceback.print_exc()
            return cq.answer("–ñ–¥—É –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–∞–≥–∏–Ω–∞—Ü–∏—è
        if data.startswith("cats:"):
            if data == "cats:refresh":
                ok = fetch_catalog(force=True)
                try: cq.message.edit_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
                except Exception: cq.message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
                return cq.answer()
            m = re.search(r"cats:p:(\d+)", data)
            page = int(m.group(1)) if m else 1
            txt = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            kb = build_cat_list_kb(page)
            try: cq.message.edit_text(txt, reply_markup=kb)
            except Exception: cq.message.reply_text(txt, reply_markup=kb)
            return cq.answer()

        # ‚îÄ‚îÄ –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–ª–±—ç–∫–∏) ‚îÄ‚îÄ
        if data.startswith("fw2start:"):
            cat_slug = data.split(":",1)[1]
            key = (cq.message.chat.id, cq.message.id)
            _w2_set(key, {"cat": cat_slug, "i": 0, "sel": OrderedDict()})
            wizard2_edit_message(cq)
            return cq.answer()

        if data.startswith("fw2v:"):
            try:
                _, aidx, vidx = data.split(":")
                aidx = int(aidx); vidx = int(vidx)
            except Exception:
                return cq.answer()
            key = _w2_key_from_cq(cq); st = _w2_get(None, key=key)
            if not st: return cq.answer()
            cat = unslugify(st["cat"]); steps = _cat_steps(cat)
            if not steps or aidx<0 or aidx>=len(steps): return cq.answer()
            an = steps[aidx]
            values = _cat_attr_values(cat, an)[:VALUES_PER_STEP]
            if not values or vidx<0 or vidx>=len(values): return cq.answer()
            val = values[vidx]
            st["sel"][an] = val
            st["i"] = min(aidx+1, len(steps))
            _w2_set(key, st)
            wizard2_edit_message(cq)
            return cq.answer()

        if data.startswith("fw2skip:"):
            try:
                _, aidx = data.split(":")
                aidx = int(aidx)
            except Exception:
                return cq.answer()
            key = _w2_key_from_cq(cq); st = _w2_get(None, key=key)
            if not st: return cq.answer()
            cat = unslugify(st["cat"]); steps = _cat_steps(cat)
            st["i"] = min(aidx+1, len(steps))
            _w2_set(key, st)
            wizard2_edit_message(cq)
            return cq.answer()

        if data.startswith("fw2back:"):
            try:
                _, aidx = data.split(":"); aidx = int(aidx)
            except Exception:
                return cq.answer()
            key = _w2_key_from_cq(cq); st = _w2_get(None, key=key)
            if not st: return cq.answer()
            cat = unslugify(st["cat"]); steps = _cat_steps(cat)
            prev_i = max(0, aidx-1)
            if 0 <= aidx < len(steps):
                st["sel"].pop(steps[aidx], None)
            st["i"] = prev_i
            _w2_set(key, st)
            wizard2_edit_message(cq)
            return cq.answer()

        if data == "fw2reset":
            key = _w2_key_from_cq(cq); st = _w2_get(None, key=key)
            if not st: return cq.answer()
            st["sel"].clear(); st["i"] = 0
            _w2_set(key, st)
            wizard2_edit_message(cq)
            return cq.answer()

        if data == "fw2show":
            wizard2_show_results(cq)
            return cq.answer()

        if data == "noop":
            return cq.answer()

    except Exception:
        traceback.print_exc()
        cq.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=False)

# /sync1c ‚Äî —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω (–∏ –∫–Ω–æ–ø–∫–∞ Reply ¬´–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥¬ª)
@app.on_message(filters.private & (filters.command("sync1c") | filters.regex("^–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥$")))
def sync1c_handler(_, message):
    if TELEGRAM_ADMIN_ID and message.from_user.id != TELEGRAM_ADMIN_ID:
        message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return
    ok=fetch_catalog(force=True)
    message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

# –°–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏
@app.on_message(filters.private & filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help"]))
def maybe_collect_phone(_, message):
    uid=message.from_user.id
    if uid in pending_reserve:
        pid=pending_reserve.get(uid); phone=(message.text or "").strip()
        if not PHONE_RE.match(phone):
            message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑."); return
        product=None
        for p in catalog:
            if p.get("id")==pid or p.get("sku")==pid: product=p; break
        text=("üßæ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
              f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
              f"–¢–æ–≤–∞—Ä: {product.get('name','') if product else pid}\n"
              f"SKU: {product.get('sku','‚Äî') if product else '‚Äî'}\n"
              f"–¶–µ–Ω–∞: {product.get('price','‚Äî') if product else '‚Äî'} ‚ÇΩ")
        pending_reserve.pop(uid, None)
        if MANAGER_CHAT_ID:
            try: _.send_message(MANAGER_CHAT_ID, text)
            except Exception: traceback.print_exc()
        message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòä")
        return

# /img
@app.on_message(filters.private & filters.command("img"))
def image_handler(_, message):
    raw=" ".join(message.command[1:]).strip()
    if not raw: message.reply_text("–ù–∞–ø–∏—à–∏: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ --no —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏"); return
    user_neg=""
    if "--no" in raw:
        parts=raw.split("--no",1); raw=parts[0].strip(); user_neg=parts[1].strip()
    prompt_src=raw; prompt_en=translate_to_english(raw) if has_cyrillic(raw) else raw
    pos_prompt, neg_prompt = boost_prompt(prompt_en, user_negative=user_neg)
    try:
        model=(HF_IMAGE_MODEL or "stabilityai/sdxl-turbo").strip()
        url=f"https://api-inference.huggingface.co/models/{model}"
        headers={"Authorization": f"Bearer {HF_TOKEN}", "Accept":"image/png"}
        payload={"inputs":pos_prompt,"parameters":{"negative_prompt":neg_prompt,"num_inference_steps":24,"guidance_scale":7.0},"options":{"wait_for_model":True}}
        resp=requests.post(url, headers=headers, json=payload, timeout=180); ct=resp.headers.get("content-type","")
        if resp.status_code==200 and ct.startswith("image/"):
            bio=BytesIO(resp.content); bio.name="image.png"
            message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt_src or prompt_en}"); return
        if resp.status_code in (429,503): message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ ‚è≥"); return
        snippet=(getattr(resp,"text","") or "")[:800]; message.reply_text(f"‚ùå Hugging Face {resp.status_code}\n{snippet}")
    except Exception:
        traceback.print_exc(); message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# –¢–µ–∫—Å—Ç (–ª–∏—á–∫–∞)
@app.on_message(filters.private & filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help"]), group=1)
def text_handler(_, message):
    uid=message.from_user.id; user_text=(message.text or "").strip(); low=user_text.lower()
    if low in ("üè† —Å—Ç–∞—Ä—Ç","—Å—Ç–∞—Ä—Ç","–º–µ–Ω—é","–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        return start_handler(_, message)
    if low in ("üì¶ –∫–∞—Ç–∞–ª–æ–≥","–∫–∞—Ç–∞–ª–æ–≥"): return show_catalog(_, message)
    if low in ("üìÇ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏","–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"):
        try: message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=build_cat_list_kb(page=1))
        except Exception: message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–µ–π—á–∞—Å.")
        return
    if low in ("üîé –ø–æ–∏—Å–∫","–ø–æ–∏—Å–∫"): message.reply_text("–ß—Ç–æ –∏—â–µ–º? –ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ: ¬´–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä 25–ê –∫–∞—Ç—É—à–∫–∞ 220–í IP20¬ª."); return
    if low in ("üßπ —Å–±—Ä–æ—Å","—Å–±—Ä–æ—Å"): 
        chat_history[uid]=[]
        message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")
        return

    if catalog:
        results=search_products_smart(user_text, limit=8)
        if results:
            for p in results:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return
        intent=parse_intent(user_text); alts=suggest_alternatives(intent, limit=6)
        if alts:
            message.reply_text("–ü–æ—Ö–æ–∂–µ–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
            for p in alts:
                try: send_product_message(message, p)
                except Exception: traceback.print_exc()
            return

    if re.search(r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|hi|hello)\b", low):
        message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –∏ —Å–æ–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —à–∞–≥–∞–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ (–ø—Ä–∏–º–µ—Ä: ¬´–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä 25–ê –∫–∞—Ç—É—à–∫–∞ 220–í¬ª)."); return

    chat_history[uid].append({"role":"user","content":user_text}); chat_history[uid]=clamp_history(chat_history[uid])
    try:
        payload={"model":OR_MODEL,"messages":[
            {"role":"system","content":"–¢—ã ‚Äî –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–æ–≥–∞–π –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            *chat_history[uid],
        ]}
        resp=requests.post("https://openrouter.ai/api/v1/chat/completions", headers=or_headers("TelegramBotNLSearch"),
                           json=payload, timeout=60, allow_redirects=False)
        if resp.status_code!=200: message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: ¬´–∫–æ–Ω—Ç–∞–∫—Ç–æ—Ä 25–ê –∫–∞—Ç—É—à–∫–∞ 220–í¬ª –∏–ª–∏ –æ—Ç–∫—Ä–æ–π ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª."); return
        bot_reply=resp.json()["choices"][0]["message"]["content"].strip() or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        chat_history[uid].append({"role":"assistant","content":bot_reply}); chat_history[uid]=clamp_history(chat_history[uid])
        message.reply_text(bot_reply)
    except Exception:
        traceback.print_exc(); message.reply_text("–£–ø—Å, –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –∏ —Ñ–∏–ª—å—Ç—Ä—ã.")

# Reset
@app.on_message(filters.private & filters.command("reset"))
def reset_handler(_, message):
    chat_history[message.from_user.id]=[]; message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
def _graceful_exit(sig, frame):
    logging.getLogger().info("Stop signal received (%s). Exiting...", sig)
    try: app.stop()
    finally: os._exit(0)
signal.signal(signal.SIGTERM, _graceful_exit)
signal.signal(signal.SIGINT, _graceful_exit)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.start()  # –°–ù–ê–ß–ê–õ–ê —Å—Ç–∞—Ä—Ç—É–µ–º Pyrogram

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ –æ –±–æ—Ç–µ (–ù–û–í–û–ï)
        try:
            me = app.get_me()
            log.info("ü§ñ –ó–∞–ø—É—â–µ–Ω –±–æ—Ç: @%s (id=%s)", me.username, me.id)
        except Exception:
            traceback.print_exc()

        # –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Ç–∞–π–º–µ—Ä
        if CATALOG_URL:
            if not fetch_catalog(force=True):
                log.warning("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ")
            periodic_refresh()

        # HTTP-—Ö—É–∫
        threading.Thread(target=_run_http_server, daemon=True).start()

        idle()

    except Exception:
        traceback.print_exc(); sys.exit(1)
    finally:
        try: app.stop()
        except Exception: pass

























