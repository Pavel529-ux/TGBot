from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import requests
import traceback
from collections import defaultdict
import base64
from io import BytesIO

# ==== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ====
# –ù–∞ Railway .env –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ —ç—Ç–æ —É–¥–æ–±–Ω–æ.
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
}.items():
    if not v:
        print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {k} –Ω–µ –∑–∞–¥–∞–Ω–∞")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ==== –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê ====
# {user_id: [ {role, content}, ... ]}
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

def clamp_history(history):
    if len(history) > HISTORY_LIMIT:
        return history[-HISTORY_LIMIT:]
    return history

# ==== –ó–ê–ì–û–õ–û–í–ö–ò –î–õ–Ø OPENROUTER ====
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        # Referer/Title –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

# ==== PYROGRAM APP ====
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ==== –ö–û–ú–ê–ù–î–´ ====
@app.on_message(filters.command("start"))
def start_handler(client, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é ü§ñ\n"
        "‚Äî –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: —è —É—á–∏—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–µ–ø–ª–∏–∫.\n"
        "‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ\n"
        "‚Äî –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: /reset"
    )

@app.on_message(filters.command("reset"))
def reset_handler(client, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ==== –¢–ï–ö–°–¢: –û–¢–í–ï–¢–´ –° –ü–ê–ú–Ø–¢–¨–Æ ====
@app.on_message(filters.text & ~filters.command(["start", "reset", "img"]))
def text_handler(client_tg, message):
    uid = message.from_user.id
    user_text = message.text

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": "openai/gpt-oss-120b",  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ OpenRouter
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        # –ß–∞—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
        resp = requests.post(
            "https://openrouter.ai/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
        )

        print("TEXT STATUS:", resp.status_code)
        print("TEXT RESP:", resp.text[:500])

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (text) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()
        bot_reply = data["choices"][0]["message"]["content"].strip()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ==== –ö–ê–†–¢–ò–ù–ö–ò: /img ====
@app.on_message(filters.command("img"))
def image_handler(client_tg, message):
    prompt = " ".join(message.command[1:]).strip()
    if not prompt:
        message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k")
        return

    try:
        img_payload = {
            "model": "stabilityai/stable-diffusion-xl",
            "prompt": prompt,
            "size": "1024x1024",  # –º–æ–∂–Ω–æ 512x512 / 768x768 / 1024x1024
            # "n": 1,            # –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        }

        # –≠–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —É OpenRouter)
        resp = requests.post(
            "https://openrouter.ai/v1/images/generations",
            headers=or_headers("TelegramBotImages"),
            json=img_payload,
            timeout=120,
        )

        print("IMG STATUS:", resp.status_code)
        print("IMG TEXT:", resp.text[:1200])

        if resp.status_code != 200:
            message.reply_text(f"‚ùå OpenRouter (image) {resp.status_code}:\n{resp.text}")
            return

        data = resp.json()

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å url –∏–ª–∏ base64
        item = None
        if isinstance(data, dict) and "data" in data and data["data"]:
            item = data["data"][0]

        if not item:
            message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API üòï")
            return

        if "url" in item and item["url"]:
            message.reply_photo(item["url"], caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
            return

        if "b64_json" in item and item["b64_json"]:
            try:
                img_bytes = base64.b64decode(item["b64_json"])
                bio = BytesIO(img_bytes)
                bio.name = "image.png"
                message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
                return
            except Exception:
                traceback.print_exc()
                message.reply_text("–ü–æ–ª—É—á–∏–ª base64, –Ω–æ –Ω–µ —Å–º–æ–≥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòï")
                return

        message.reply_text("API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üòï")

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ==== –ó–ê–ü–£–°–ö ====
print("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
app.run()










