# bot.py
from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import sys
import requests
import traceback
from collections import defaultdict
from io import BytesIO
import logging
import signal

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

# –¢–µ–∫—Å—Ç (OpenRouter)
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OR_MODEL = os.getenv("OR_TEXT_MODEL", "openai/gpt-oss-120b")

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ (Hugging Face) ‚Äî –¥–µ—Ñ–æ–ª—Ç –Ω–∞ SDXL Base 1.0
HF_TOKEN = os.getenv("HF_TOKEN")
HF_IMAGE_MODEL = os.getenv("HF_IMAGE_MODEL", "stabilityai/stable-diffusion-xl-base-1.0")

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID_STR,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "HF_TOKEN": HF_TOKEN,  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è /img
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
    sys.exit(1)

try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR)
    sys.exit(1)

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

# ---------- –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê ----------
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

def clamp_history(history):
    return history[-HISTORY_LIMIT:] if len(history) > HISTORY_LIMIT else history

# ---------- PYROGRAM ----------
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@app.on_message(filters.command("start"))
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–∞–º—è—Ç—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫ ü§ñ\n"
        "‚Äî –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏, —è —É—á–∏—Ç—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–ø–ª–∏–∫.\n"
        "‚Äî –ö–∞—Ä—Ç–∏–Ω–∫–∞: /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ\n"
        "‚Äî –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: /reset"
    )

@app.on_message(filters.command("reset"))
def reset_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    message.reply_text("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# ---------- –¢–ï–ö–°–¢ (OpenRouter) ----------
@app.on_message(filters.text & ~filters.command(["start", "reset", "img"]))
def text_handler(_, message):
    uid = message.from_user.id
    user_text = message.text

    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": OR_MODEL,
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
            allow_redirects=False
        )

        log.info("TEXT %s | %s", resp.status_code, resp.headers.get("content-type", ""))
        if resp.status_code != 200:
            snippet = (resp.text or "")[:600]
            message.reply_text(f"‚ùå OpenRouter {resp.status_code}\n{snippet}")
            return

        data = resp.json()
        bot_reply = data["choices"][0]["message"]["content"].strip()

        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ---------- –ö–ê–†–¢–ò–ù–ö–ò /img (Hugging Face: SDXL Base 1.0) ----------
@app.on_message(filters.command("img"))
def image_handler(_, message):
    prompt = " ".join(message.command[1:]).strip()
    if not prompt:
        message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k")
        return

    try:
        model = HF_IMAGE_MODEL.strip()
        url = f"https://api-inference.huggingface.co/models/{model}"
        headers = {
            "Authorization": f"Bearer {HF_TOKEN}",
            "Accept": "image/png"
        }
        payload = {
            "inputs": prompt,
            "options": {"wait_for_model": True}
        }

        log.info("IMG CALL -> model=%r url=%r", model, url)
        resp = requests.post(url, headers=headers, json=payload, timeout=300)
        ct = resp.headers.get("content-type", "")
        log.info("IMG %s | %s", resp.status_code, ct)

        # –£—Å–ø–µ—Ö ‚Äî –±–∞–π—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if resp.status_code == 200 and ct.startswith("image/"):
            bio = BytesIO(resp.content)
            bio.name = "image.png"
            message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
            return

        # –ß–∞—Å—Ç—ã–µ —Å–ª—É—á–∞–∏
        body = (resp.text or "")[:800]
        if resp.status_code == 404:
            message.reply_text(
                "‚ùå Hugging Face 404 (–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)\n"
                f"–ú–æ–¥–µ–ª—å: {model}\nURL: {url}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å —Ç–æ—á–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ —É –Ω–µ—ë –µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è/–≥–µ–π—Ç–∏–Ω–≥ ‚Äî –æ—Ç–∫—Ä–æ–π –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–∏–º–∏ —É—Å–ª–æ–≤–∏—è "
                "–ø–æ–¥ —Ç–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–∏—Å–∞–Ω HF_TOKEN."
            )
            return
        if resp.status_code == 403:
            message.reply_text("‚ùå Hugging Face 403 (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞). –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –∏ –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏.")
            return
        if resp.status_code == 503:
            message.reply_text("‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è (503). –ü–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 15‚Äì30 —Å–µ–∫—É–Ω–¥.")
            return

        message.reply_text(f"‚ùå Hugging Face {resp.status_code}\n{body}")

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ---------- –ì–†–ê–¶–ò–û–ó–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï ----------
def _graceful_exit(sig, frame):
    logging.getLogger().info("Stop signal received (%s). Exiting...", sig)
    try:
        app.stop()
    finally:
        os._exit(0)

signal.signal(signal.SIGTERM, _graceful_exit)
signal.signal(signal.SIGINT, _graceful_exit)

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run()
    except Exception:
        traceback.print_exc()
        sys.exit(1)














