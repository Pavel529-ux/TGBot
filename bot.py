# bot.py
from pyrogram import Client, filters
from pyrogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InlineQueryResultPhoto, InlineQueryResultArticle, InputTextMessageContent
)
from dotenv import load_dotenv
import os
import sys
import re
import requests
import traceback
from collections import defaultdict
from io import BytesIO
import logging
import signal
import threading
from datetime import datetime, timedelta

# ==========================
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø (Railway ‚Üí Variables)
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:
# BOT_TOKEN
# API_ID
# API_HASH
# OPENROUTER_API_KEY
# HF_TOKEN
#
# –î–õ–Ø –ö–ê–¢–ê–õ–û–ì–ê (1–°/—Ñ–∞–π–ª/URL):
# CATALOG_URL
# CATALOG_AUTH_USER
# CATALOG_AUTH_PASS
# CATALOG_REFRESH_MIN=30
# TELEGRAM_ADMIN_ID
# MANAGER_CHAT_ID
#
# –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û:
# OR_TEXT_MODEL
# HF_IMAGE_MODEL
# ==========================

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID_STR = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

# –¢–µ–∫—Å—Ç (OpenRouter)
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OR_MODEL = os.getenv("OR_TEXT_MODEL", "openai/gpt-oss-120b")

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ (Hugging Face)
HF_TOKEN = os.getenv("HF_TOKEN")
HF_IMAGE_MODEL = os.getenv("HF_IMAGE_MODEL", "stabilityai/sdxl-turbo")

# –ö–∞—Ç–∞–ª–æ–≥ / 1–°
CATALOG_URL = os.getenv("CATALOG_URL")
CATALOG_AUTH_USER = os.getenv("CATALOG_AUTH_USER")
CATALOG_AUTH_PASS = os.getenv("CATALOG_AUTH_PASS")
CATALOG_REFRESH_MIN = int(os.getenv("CATALOG_REFRESH_MIN", "30"))
TELEGRAM_ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0"))

missing = [k for k, v in {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID_STR,
    "API_HASH": API_HASH,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "HF_TOKEN": HF_TOKEN,
}.items() if not v]
if missing:
    log.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
    sys.exit(1)

try:
    API_ID = int(API_ID_STR)
except Exception:
    log.error("‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %r", API_ID_STR)
    sys.exit(1)

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def or_headers(title: str = "TelegramBot"):
    return {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
        "HTTP-Referer": "https://openrouter.ai",
        "X-Title": title,
    }

def has_cyrillic(text: str) -> bool:
    return bool(re.search(r"[\u0400-\u04FF]", text or ""))

def translate_to_english(text: str) -> str:
    """RU ‚Üí EN —á–µ—Ä–µ–∑ OpenRouter. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥."""
    try:
        payload = {
            "model": OR_MODEL,
            "messages": [
                {"role": "system", "content": (
                    "You are a precise translator. Translate the user prompt "
                    "from Russian to concise English. Return ONLY the translated text."
                )},
                {"role": "user", "content": text}
            ],
            "temperature": 0.2
        }
        r = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("PromptTranslator"),
            json=payload,
            timeout=40,
            allow_redirects=False
        )
        if r.status_code == 200 and r.headers.get("content-type","").startswith("application/json"):
            return r.json()["choices"][0]["message"]["content"].strip()
        log.warning("Translate HTTP %s | %s", r.status_code, r.text[:300])
    except Exception:
        traceback.print_exc()
    return text  # fallback

def boost_prompt(en_prompt: str, user_negative: str = "") -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (positive_prompt, negative_prompt) —Å —É—Å–∏–ª–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞."""
    base_positive = (
        f"{en_prompt}, ultra-detailed, high quality, high resolution, "
        f"sharp focus, intricate details, 8k, dramatic lighting"
    )
    base_negative = (
        "lowres, blurry, out of focus, pixelated, deformed, bad anatomy, "
        "extra fingers, watermark, text, signature"
    )
    neg = (base_negative + ", " + user_negative) if user_negative else base_negative
    return base_positive, neg

PHONE_RE = re.compile(r"^\+?\d[\d\s\-()]{6,}$")

# ---------- –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê ----------
chat_history = defaultdict(list)
HISTORY_LIMIT = 10

def clamp_history(history):
    return history[-HISTORY_LIMIT:] if len(history) > HISTORY_LIMIT else history

# ---------- –ö–ê–¢–ê–õ–û–ì ----------
catalog = []             # —Å–ø–∏—Å–æ–∫ dict'–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
catalog_last_fetch = None
catalog_lock = threading.Lock()
pending_reserve = {}     # user_id -> product_id (–æ–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω)

def fetch_catalog(force=False):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ CATALOG_URL (JSON —Å–ø–∏—Å–æ–∫). –í–µ—Ä–Ω—ë—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
    global catalog, catalog_last_fetch
    with catalog_lock:
        now = datetime.utcnow()
        if not force and catalog_last_fetch and now - catalog_last_fetch < timedelta(minutes=CATALOG_REFRESH_MIN):
            return False
        if not CATALOG_URL:
            log.warning("CATALOG_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞")
            return False

        auth = (CATALOG_AUTH_USER, CATALOG_AUTH_PASS) if CATALOG_AUTH_USER else None
        try:
            r = requests.get(CATALOG_URL, auth=auth, timeout=30)
            r.raise_for_status()
            data = r.json()
            if isinstance(data, list):
                catalog = data
                catalog_last_fetch = now
                log.info("–ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: %d –ø–æ–∑–∏—Ü–∏–π", len(catalog))
                return True
            else:
                log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ (–æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫)")
        except Exception as e:
            traceback.print_exc()
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: %s", e)
        return False

def periodic_refresh():
    try:
        fetch_catalog(force=False)
    finally:
        # –µ–¥–∏–Ω–∏—á–Ω—ã–π —Ç–∞–π–º–µ—Ä; –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ
        threading.Timer(CATALOG_REFRESH_MIN * 60, periodic_refresh).start()

def search_products(query, limit=10):
    q = (query or "").strip().lower()
    results = []
    for item in catalog:
        name = str(item.get("name","")).lower()
        sku  = str(item.get("sku","")).lower()
        brand = str(item.get("brand","")).lower()
        hay = f"{name} {sku} {brand}"
        if q in hay:
            results.append(item)
            if len(results) >= limit:
                break
    return results

def product_caption(p):
    price = p.get("price")
    stock = p.get("stock")
    lines = [
        f"üõí {p.get('name','')}",
        f"–ê—Ä—Ç–∏–∫—É–ª: {p.get('sku','‚Äî')}",
        f"–¶–µ–Ω–∞: {price} ‚ÇΩ" if price is not None else "–¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ",
        f"–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç." if stock is not None else "–ù–∞–ª–∏—á–∏–µ: —É—Ç–æ—á–Ω—è–π—Ç–µ",
    ]
    return "\n".join(lines)

def product_keyboard(p):
    pid = p.get("id") or p.get("sku")
    buttons = [[InlineKeyboardButton("üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve:{pid}")]]
    if p.get("category"):
        buttons.append([InlineKeyboardButton(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p['category']}", callback_data=f"cat:{p['category']}")])
    # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ
    buttons.append([InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –≤ —á–∞—Ç–µ", switch_inline_query_current_chat=p.get("sku",""))])
    return InlineKeyboardMarkup(buttons)

# ---------- PYROGRAM ----------
app = Client("my_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# ---------- –ö–û–ú–ê–ù–î–´ / –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ----------

@app.on_message(filters.command("start") & filters.private)
def start_handler(_, message):
    uid = message.from_user.id
    chat_history[uid] = []
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="cat:all"),
         InlineKeyboardButton("üîé –ü–æ–∏—Å–∫", switch_inline_query_current_chat="")],
        [InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="reset_ctx")]
    ])
    message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚ö°\n"
        "‚Äî –î–∏–∞–ª–æ–≥ —Å –ø–∞–º—è—Ç—å—é\n"
        "‚Äî –ö–∞—Ä—Ç–∏–Ω–∫–∏: /img <–æ–ø–∏—Å–∞–Ω–∏–µ>  (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç  --no ...)\n"
        "‚Äî –ö–∞—Ç–∞–ª–æ–≥: /catalog, –ø–æ–∏—Å–∫: /find <–∑–∞–ø—Ä–æ—Å>\n"
        "‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: /reset",
        reply_markup=kb
    )

@app.on_message(filters.command("help") & filters.private)
def help_handler(_, message):
    message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /catalog ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ /find <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/SKU/–±—Ä–µ–Ω–¥—É\n"
        "‚Ä¢ /img <–æ–ø–∏—Å–∞–Ω–∏–µ> --no <–∏—Å–∫–ª—é—á–∏—Ç—å> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚Ä¢ /reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n"
    )

@app.on_message(filters.command("ping"))
def ping_handler(_, message):
    message.reply_text("pong ‚úÖ")

# ----- –ö–ê–¢–ê–õ–û–ì -----
@app.on_message(filters.command("catalog"))
def catalog_handler(_, message):
    if not catalog:
        message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    for p in catalog[:10]:
        try:
            img = p.get("image_url")
            caption = product_caption(p)
            kb = product_keyboard(p)
            if img:
                message.reply_photo(img, caption=caption, reply_markup=kb)
            else:
                message.reply_text(caption, reply_markup=kb)
        except Exception:
            traceback.print_exc()

@app.on_message(filters.command("find"))
def find_handler(_, message):
    query = " ".join(message.command[1:]).strip()
    if not query:
        message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª>")
        return
    if not catalog:
        message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    results = search_products(query, limit=10)
    if not results:
        message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üòï –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    for p in results:
        try:
            img = p.get("image_url")
            caption = product_caption(p)
            kb = product_keyboard(p)
            if img:
                message.reply_photo(img, caption=caption, reply_markup=kb)
            else:
                message.reply_text(caption, reply_markup=kb)
        except Exception:
            traceback.print_exc()

@app.on_inline_query()
def inline_query_handler(client, inline_query):
    q = inline_query.query.strip()
    if not q or not catalog:
        return
    results = search_products(q, limit=25)

    items = []
    for idx, p in enumerate(results):
        caption = product_caption(p)
        kb = product_keyboard(p)
        img = p.get("image_url")

        if img:
            items.append(
                InlineQueryResultPhoto(
                    photo_url=img,
                    thumb_url=img,
                    caption=caption,
                    reply_markup=kb,
                    id=str(idx)
                )
            )
        else:
            items.append(
                InlineQueryResultArticle(
                    title=p.get("name","–¢–æ–≤–∞—Ä"),
                    description=f"SKU: {p.get('sku','‚Äî')} | {p.get('price','‚Äî')} ‚ÇΩ",
                    input_message_content=InputTextMessageContent(caption),
                    reply_markup=kb,
                    id=str(idx)
                )
            )
    try:
        inline_query.answer(items, cache_time=5, is_personal=True)
    except Exception:
        traceback.print_exc()

@app.on_callback_query()
def callbacks_handler(client, cq):
    data = cq.data or ""
    if data == "reset_ctx":
        chat_history[cq.from_user.id] = []
        cq.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω")
        cq.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â—ë–Ω. /start")
        return

    if data.startswith("reserve:"):
        pid = data.split(":",1)[1]
        pending_reserve[cq.from_user.id] = pid
        cq.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
        cq.answer()
    elif data.startswith("cat:"):
        cat = data.split(":",1)[1].strip().lower()
        items = [p for p in catalog if cat in ("all", str(p.get("category","")).lower())]
        if not items:
            cq.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
            cq.answer()
            return
        for p in items[:10]:
            img = p.get("image_url")
            caption = product_caption(p)
            kb = product_keyboard(p)
            if img:
                cq.message.reply_photo(img, caption=caption, reply_markup=kb)
            else:
                cq.message.reply_text(caption, reply_markup=kb)
        cq.answer()

@app.on_message(filters.command("sync1c"))
def sync1c_handler(_, message):
    if TELEGRAM_ADMIN_ID and message.from_user.id != TELEGRAM_ADMIN_ID:
        message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    ok = fetch_catalog(force=True)
    message.reply_text("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω" if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

# ----- –°–ë–û–† –¢–ï–õ–ï–§–û–ù–ê –î–õ–Ø –ë–†–û–ù–ò -----
@app.on_message(filters.text & ~filters.command(["start","reset","img","catalog","find","sync1c","help","ping"]))
def maybe_collect_phone(_, message):
    uid = message.from_user.id
    if uid in pending_reserve:
        pid = pending_reserve.get(uid)
        phone = (message.text or "").strip()

        if not PHONE_RE.match(phone):
            message.reply_text("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑.")
            return

        # –Ω–∞–π–¥—ë–º —Ç–æ–≤–∞—Ä –ø–æ pid
        product = None
        for p in catalog:
            if p.get("id") == pid or p.get("sku") == pid:
                product = p
                break

        text = (
            "üßæ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–¢–æ–≤–∞—Ä: {product.get('name','') if product else pid}\n"
            f"SKU: {product.get('sku','‚Äî') if product else '‚Äî'}\n"
            f"–¶–µ–Ω–∞: {product.get('price','‚Äî') if product else '‚Äî'} ‚ÇΩ"
        )

        pending_reserve.pop(uid, None)

        if MANAGER_CHAT_ID:
            try:
                _.send_message(MANAGER_CHAT_ID, text)
            except Exception:
                traceback.print_exc()

        message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üòä")
        return  # –Ω–µ –ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ

# ----- –ö–ê–†–¢–ò–ù–ö–ò /img (HF Inference API + –ø–µ—Ä–µ–≤–æ–¥ + –±—É—Å—Ç) -----
@app.on_message(filters.command("img"))
def image_handler(_, message):
    """
    /img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ --no —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏
    """
    raw = " ".join(message.command[1:]).strip()
    if not raw:
        message.reply_text(
            "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/img –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–µ–æ–Ω, 4k  --no —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏"
        )
        return

    # —Ä–∞–∑–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ negative –ø–æ—Å–ª–µ "--no"
    user_neg = ""
    if "--no" in raw:
        parts = raw.split("--no", 1)
        raw = parts[0].strip()
        user_neg = parts[1].strip()

    # –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    prompt_src = raw
    prompt_en = translate_to_english(raw) if has_cyrillic(raw) else raw

    # –±—É—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    pos_prompt, neg_prompt = boost_prompt(prompt_en, user_negative=user_neg)

    try:
        model = (HF_IMAGE_MODEL or "stabilityai/sdxl-turbo").strip()
        url = f"https://api-inference.huggingface.co/models/{model}"
        headers = {
            "Authorization": f"Bearer {HF_TOKEN}",
            "Accept": "image/png"
        }
        payload = {
            "inputs": pos_prompt,
            "parameters": {
                "negative_prompt": neg_prompt,
                "num_inference_steps": 24,
                "guidance_scale": 7.0
            },
            "options": {"wait_for_model": True}
        }

        log.info("IMG CALL -> model=%r url=%r", model, url)
        resp = requests.post(url, headers=headers, json=payload, timeout=180)
        ct = resp.headers.get("content-type", "")
        log.info("IMG %s | %s", resp.status_code, ct)

        if resp.status_code == 200 and ct.startswith("image/"):
            bio = BytesIO(resp.content)
            bio.name = "image.png"
            shown_prompt = prompt_src if prompt_src else prompt_en
            message.reply_photo(bio, caption=f"üé® –ü–æ –∑–∞–ø—Ä–æ—Å—É: {shown_prompt}")
            return

        # –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—ã–º –∫–æ–¥–∞–º
        if resp.status_code in (429, 503):
            message.reply_text("–ú–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É ‚è≥")
            return

        snippet = (getattr(resp, "text", "") or "")[:800]
        message.reply_text(
            "‚ùå Hugging Face {code}\n–ú–æ–¥–µ–ª—å: {model}\nURL: {url}\n\n{snippet}".format(
                code=resp.status_code, model=model, url=url, snippet=snippet
            )
        )

    except Exception:
        traceback.print_exc()
        message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üé®")

# ----- –¢–ï–ö–°–¢–û–í–´–ô –î–ò–ê–õ–û–ì –° –ü–ê–ú–Ø–¢–¨–Æ (OpenRouter) -----
@app.on_message(filters.text & ~filters.command([
    "start","reset","img","catalog","find","sync1c","help","ping"
]))
def text_handler(_, message):
    uid = message.from_user.id
    user_text = (message.text or "").strip()

    # –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    low = user_text.lower()
    if re.search(r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|hi|hello)\b", low):
        message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –ø–æ–º–æ—á—å: –∫–∞—Ç–∞–ª–æ–≥ (/catalog) –∏–ª–∏ –ø–æ–∏—Å–∫ (/find <–∑–∞–ø—Ä–æ—Å>)?")
        return
    if "–∫–∞–±–µ–ª—å" in low:
        message.reply_text("–ò—â–µ—à—å –∫–∞–±–µ–ª—å? –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: `/find –∫–∞–±–µ–ª—å 35 –º–º`", quote=True)
        return
    if "–ø—É—Å–∫–∞—Ç–µ–ª" in low:
        message.reply_text("–ü–æ –ø—É—Å–∫–∞—Ç–µ–ª—è–º ‚Äî `/find –ø—É—Å–∫–∞—Ç–µ–ª—å 95–ê 220–í` –∏–ª–∏ `/find –ø—É—Å–∫–∞—Ç–µ–ª—å 250–ê`", quote=True)
        return
    if "–∞–≤—Ç–æ–º–∞—Ç" in low or re.search(r"\b\d{2,3}\s?–∞\b", low):
        message.reply_text("–ù—É–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç? –ü–æ–ø—Ä–æ–±—É–π: `/find –∞–≤—Ç–æ–º–∞—Ç 400–ê` –∏–ª–∏ `/find –∞–≤—Ç–æ–º–∞—Ç 630–ê ABB`", quote=True)
        return

    # –¥–∏–∞–ª–æ–≥ —Å –ø–∞–º—è—Ç—å—é (OpenRouter)
    chat_history[uid].append({"role": "user", "content": user_text})
    chat_history[uid] = clamp_history(chat_history[uid])

    try:
        payload = {
            "model": OR_MODEL,
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                *chat_history[uid],
            ],
        }

        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=or_headers("TelegramBotWithMemory"),
            json=payload,
            timeout=60,
            allow_redirects=False
        )

        log.info("TEXT %s | %s", resp.status_code, resp.headers.get("content-type", ""))
        if resp.status_code != 200:
            txt = (getattr(resp, "text", "") or "")[:600]
            message.reply_text(f"‚ùå OpenRouter {resp.status_code}\n{txt}")
            return

        data = resp.json()
        bot_reply = data.get("choices", [{}])[0].get("message", {}).get("content", "") or ""
        bot_reply = bot_reply.strip() or "ü§ñ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"

        chat_history[uid].append({"role": "assistant", "content": bot_reply})
        chat_history[uid] = clamp_history(chat_history[uid])

        message.reply_text(bot_reply)

    except Exception:
        traceback.print_exc()
        message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenRouter ü§ñ")

# ---------- –ì–†–ê–¶–ò–û–ó–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï ----------
def _graceful_exit(sig, frame):
    logging.getLogger().info("Stop signal received (%s). Exiting...", sig)
    try:
        app.stop()
    finally:
        os._exit(0)

signal.signal(signal.SIGTERM, _graceful_exit)
signal.signal(signal.SIGINT, _graceful_exit)

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    try:
        log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if CATALOG_URL:
            if not fetch_catalog(force=True):
                log.warning("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ")
            periodic_refresh()
        app.run()
    except Exception:
        traceback.print_exc()
        sys.exit(1)
















